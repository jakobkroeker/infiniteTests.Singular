/////////////////////
version="version test.sba";
category="Commutative Algebra";
info="
";

LIB "primdecint.lib";
LIB "randomIdeal.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";
 
proc testSBA( rng, idealG, trials, logfile )
{
    if (defined(basering) ) {   def BAS=basering; }
    setring rng;
    short = 0;
    int trial;
    ideal cs,  I, J, gI, sI, ggI, ssI;
    while( trial<trials )
    {   

       if (defined(qrng)) {kill qrng; }
       write(":w "+logfile,emptystring);
       monitor(logfile,"io");
       write(":w "+logfile,emptystring);
       dbprint(1, "option(redSB);");
       dbprint(1, "LIB \"primdec.lib\";");
       dbprint(1, "LIB \"wrappers.lib\";");
       dbprint( 1, "ring rng = "  + string( basering)+";" );
       dbprint( 1, "int trial = " + string( trial) + ";" );
       short = 0;
       I = idealG( );
       dbprint( 1, "system(\"random\", " + string( system("random") ) + ");" );
       dbprint( 1, "ideal I = " + string( I ) + ";" );
       
       dbprint( 1, "       ideal gI =  std(I);" );
       gI =  std(I);
       dbprint( 1, "       ideal ggI =  std(gI);" );
       ggI =  std(gI);

       dbprint( 1, "       ideal sI =  sba(I);" );

       sI =  sba(I);
       dbprint( 1, "       ideal ssI =  sba(sI);" );
       ssI =  sba(sI);

       dbprint(1, "ASSUME(0, 0== size( std(reduce (I,gI ) ))  );");
       ASSUME(0, 0== size( std(reduce (I,gI ) ))  );
        dbprint(1, "ASSUME(0, 0== size( std(reduce (I,sI ) ))  );");
       ASSUME(0, 0== size( std(reduce (I,sI ) ))  );

       dbprint(1,"ASSUME(0, size(sI)== size(ssI) );");
       ASSUME(0, size(sI)== size(ssI) );
       dbprint(1,"ASSUME(0, size(gI)== size(ggI) );");
       ASSUME(0, size(gI)== size(ggI) );


        dbprint(1,"ASSUME(0, idealsEqual(gI,ggI ));");
       ASSUME(0, idealsEqual(gI,ggI ));

        dbprint(1,"ASSUME(0, idealsEqual(sI,ssI ));");
       ASSUME(0, idealsEqual(sI,ssI ));


        dbprint(1,"ASSUME(0, idealsAreEqual(gI,ggI ));");
       ASSUME(0, idealsAreEqual(gI,ggI ));

        dbprint(1,"ASSUME(0, idealsAreEqual(sI,ssI ));");
       ASSUME(0, idealsAreEqual(sI,ssI ));

       dbprint(1,"ASSUME(0, idealRepresentationsEqual(gI,ggI ));");
       ASSUME(0, idealRepresentationsEqual(gI,ggI ));
       dbprint(1,"ASSUME(0, idealRepresentationsEqual(sI,ssI ));");
       ASSUME(0, idealRepresentationsEqual(sI,ssI ));



       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}

 

	

