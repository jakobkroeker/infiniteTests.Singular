/////////////////////
version="version test.std";
category="Commutative Algebra";
info="
";

LIB "primdecint.lib";
LIB "randomideal.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";
 
 
static proc mod_init()
{
    if (not defined(TGroebnerTestFlag_def) )
    {
        int TGroebnerTestFlag_def = 0;
        newstruct("TGroebnerTestFlags",   " int reduceTest, int repeatApplication,  int equalTest, int optionflagTest, int testIntersect");   
    }
}

proc defaultGroebnerTestFlags()
{
  TGroebnerTestFlags flags;
  flags.reduceTest = 1;
  flags.repeatApplication = 1;
  flags.equalTest = 1;
  flags.optionflagTest = 1;
  flags.testIntersect = 0;
  return (flags);
}


proc testLeadCoeffsNotNegative(gI)
{
    int k;
        for(k=1; k <= ncols(gI); k++)
        {
             ASSUME(0, (leadcoef(gI[k]) >= 0));
        }
}



proc testPureGroebner( getRng, gens, optionlist, trials, testflags, logfile )
{

    int nothing =1;
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
      def rng = getRng( );
      setring rng;
      option(warn);
      
    short = 0;
    int trial;

    while( 1 )
    {   
      option(nowarn);  
      kill rng;      

      dbprint(1, " // getRng() ;");

      def rng = getRng( );
      setring rng;
      ideal cs,  I, J, gI, gJ, ggI, ggJ;


      if (testflags.optionflagTest)
      {
        if ( hasGlobalOrLocalOrdering(basering))
        {
           chooseRandomOptionsFromList(optionlist);
        }
      }
      if (warnIsSet)
      {
        option(warn);
      }
      
      
       if (defined(qrng)) {kill qrng; }
       monitor(logfile,"io");
       write(":w "+logfile,emptystring);
       write(":w "+logfile,emptystring);
       monitor(logfile,"io");
       // write(":w "+logfile,emptystring);
      
       dbprint(1, "LIB \"wrappers.lib\";");
       dbprint(1, "LIB \"src/randomRing.lib\" ;");
       dbprint(1, "LIB \"bugs/test.std.correct\" ;");
       dbprint( 1, "ring rng = "  + string( basering)+";" );
       dbprint( 1, "short = 0 ;" );
       
       if ( not ("0" == string(minpoly) ))
       {
         dbprint( 1, "minpoly = " + string(minpoly) + ";");
       }
       dbprint( 1, "intvec op = "+string( option(get) )+";");           
       dbprint( 1, " option(set, op) ;");
       dbprint( 1, " option() ;");
       dbprint( 1, " // option() ;" + option() );
       dbprint( 1, "int trial = " + string( trial) + ";" );
       short = 0;
       I = gens.idealG( );
       dbprint( 1, "system(\"random\", " + string( system("random") ) + ");" );
       dbprint( 1, "ideal I = " + string( I ) + ";" );
       dbprint( 1, "  dbprint( 1, \"ideal I = \" + string( I ) + \";\" );" );
       
       dbprint( 1, "       ideal gI =  std(I);" );
       gI =  std(I);
       //dbprint( 1, "//        gI = "+string(gI) );
     

      if (hasIntegerCoefficientRing(basering))
      {
          dbprint( 1, "    testLeadCoeffsNotNegative(gI);" );
          testLeadCoeffsNotNegative(gI);
      }
     
       
       if (testflags.reduceTest)
       {
            dbprint(1, "ASSUME(0, 0== size( std(reduce (I,gI ) ))  );");
            ASSUME(0, 0== size( std(reduce (I,gI ) ))  );
       }
       
        if (testflags.equalTest)
        {

           dbprint(1,"ASSUME(0, idealsAreEqual(I,gI ));");
           ASSUME(0, idealsAreEqual(I,gI ));  

           /*

              if ( hasGlobalOrdering(basering) or hasLocalOrdering(basering) )
              {        
           
                   dbprint(1,"ASSUME(0, idealsEqual(I,gI ));");
                   ASSUME(0, idealsEqual(I,gI ));
              }
           */

       }
       //if ( hasGlobalOrdering(basering))
       //{

       //}
       
       if (testflags.repeatApplication)
       { 
           dbprint( 1, "       ideal ggI =  std(gI);" );
           ggI =  std(gI);
          dbprint( 1, "//  hasIntegerCoefficientRing(basering); ");
          if (hasIntegerCoefficientRing(basering))
          {
              dbprint( 1, " testLeadCoeffsNotNegative(ggI);" );
              testLeadCoeffsNotNegative(ggI);
          }
   
          if (testflags.equalTest)
          {
             dbprint(1,"ASSUME(0, idealsAreEqual(gI,ggI ));");
             ASSUME(0, idealsAreEqual(gI,ggI ));
 
             /*
              if ( hasGlobalOrdering(basering) or hasLocalOrdering(basering) )
              {
                     dbprint(1,"ASSUME(0, idealsEqual(gI,ggI ));");
                     ASSUME(0, idealsEqual(gI,ggI ));
              }

              */
 
 
          }
      }

     if (not testflags.optionflagTest)
     {
        continue;
     }
      // if ( hasGlobalOrdering(basering) or hasLocalOrdering(basering) )
      dbprint(1,"  // hasGlobalOrdering(basering);");
      if ( hasGlobalOrdering(basering)  )
      {
  
          if ( optionIsSet("redSB") )
          {
               
                dbprint(1,"  // idealRepresentationReducedTail(gI);");
                if (not idealRepresentationReducedTail(gI ) )
                {
                   dbprint( 1, "//        gI = "+string(gI) );
                }
               

               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gI ));");
               ASSUME(0, idealRepresentationReducedTail( gI ));
               


               dbprint(1,"ASSUME(0, idealRepresentationReduced( gI ));");
               ASSUME(0, idealRepresentationReduced( gI ));
               
               
               if (testflags.repeatApplication)
               { 
       
                   dbprint(1,"ASSUME(0, size(gI)== size(ggI) );");
                   ASSUME(0, size(gI)== size(ggI) );

                  dbprint(1,"  // idealRepresentationReducedTail(ggI);");
                  if (not idealRepresentationReducedTail(ggI ) )
                  {
                     dbprint( 1, "//        ggI = "+string(ggI) +";");
                  }
                  
                  
                 dbprint(1,"ASSUME(0, idealRepresentationReduced( ggI ));");
                 ASSUME(0, idealRepresentationReduced( ggI ));
               
                
                  dbprint(1,"ASSUME(0, idealRepresentationReducedTail( ggI ));");
                  ASSUME(0, idealRepresentationReducedTail( ggI ));
             }
             
         

          }

      }
     /* dbprint(1, "//start sync");
     while (nothing < 1000000)
     {
         nothing = nothing+1;
     }
     dbprint(1, "//end sync");

     nothing = 1;
     dbprint(1, "//finished sync");

     while (nothing < 1000000)
     {
         nothing = nothing+1;
     }
     */
  
     nothing = 1;

       write(":w "+logfile,emptystring);
       //monitor(logfile,"io");

       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}


proc testGroebner( getRng, gens, optionlist, trials, testflags, logfile )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
      def rng = getRng( );
      setring rng;
      option(warn);
      
    short = 0;
    int trial;

    while( 1 )
    {   
      option(nowarn);  
      kill rng;      
      def rng = getRng( );
      setring rng;
      ideal cs,  I, J, gI, gJ, ggI, ggJ;


      if (testflags.optionflagTest)
      {
        if ( hasGlobalOrLocalOrdering(basering))
        {
           chooseRandomOptionsFromList(optionlist);
        }
      }
      if (warnIsSet)
      {
        option(warn);
      }
      
      
       if (defined(qrng)) {kill qrng; }
       write(":w "+logfile,emptystring);
       monitor(logfile,"io");
       write(":w "+logfile,emptystring);
       dbprint(1, "LIB \"primdec.lib\";");
       dbprint(1, "LIB \"wrappers.lib\";");
       dbprint(1, "LIB \"src/randomRing.lib\" ;");
       dbprint(1, "LIB \"bugs/test.std.correct\" ;");
       dbprint( 1, "ring rng = "  + string( basering)+";" );
       dbprint( 1, "short = 0 ;" );
       
       if ( not ("0" == string(minpoly) ))
       {
         dbprint( 1, "minpoly = " + string(minpoly) + ";");
       }
       dbprint( 1, "intvec op = "+string( option(get) )+";");           
       dbprint( 1, " option(set, op) ;");
       dbprint( 1, " option() ;");
       dbprint( 1, " // option() ;" + option() );
       dbprint( 1, "int trial = " + string( trial) + ";" );
       short = 0;
       I = gens.idealG( );
       J = gens.idealG( );
       dbprint( 1, "system(\"random\", " + string( system("random") ) + ");" );
       dbprint( 1, "ideal I = " + string( I ) + ";" );
       dbprint( 1, "ideal J = " + string( J ) + ";" );
       
       dbprint( 1, "       ideal gI =  std(I);" );
       gI =  std(I);
       //dbprint( 1, "//        gI = "+string(gI) );
     

       dbprint( 1, "       ideal gJ =  std(J);" );

       gJ =  std(J);
       //dbprint( 1, "//        gJ = "+string(gJ)+";" );
          if (hasIntegerCoefficientRing(basering))
          {
              dbprint( 1, " testLeadCoeffsNotNegative(gI);" );
              dbprint( 1, "    testLeadCoeffsNotNegative(gJ);" );
              testLeadCoeffsNotNegative(gI);
              testLeadCoeffsNotNegative(gJ);
          }
       
       if (testflags.reduceTest)
       {
            dbprint(1, "ASSUME(0, 0== size( std(reduce (I,gI ) ))  );");
            ASSUME(0, 0== size( std(reduce (I,gI ) ))  );
       
            dbprint(1, "ASSUME(0, 0== size( std(reduce (J,gJ ) ))  );");
            ASSUME(0, 0== size( std(reduce (J,gJ ) ))  );
       }
       
        if (testflags.equalTest)
        {

           dbprint(1,"ASSUME(0, idealsAreEqual(I,gI ));");
           ASSUME(0, idealsAreEqual(I,gI ));

           dbprint(1,"ASSUME(0, idealsAreEqual(J,gJ ));");
           ASSUME(0, idealsAreEqual(J,gJ ));
           
           
           dbprint(1,"ASSUME(0, idealsEqual(I,gI ));");
           ASSUME(0, idealsEqual(I,gI ));

           dbprint(1,"ASSUME(0, idealsEqual(J,gJ ));");
           ASSUME(0, idealsEqual(J,gJ ));
       }
       //if ( hasGlobalOrdering(basering))
       //{

       //}
       
       if (testflags.repeatApplication)
       { 
           dbprint( 1, "       ideal ggI =  std(gI);" );
           ggI =  std(gI);
           //dbprint( 1, "//        ggI = "+string(ggI) +";");
           
           dbprint( 1, "       ideal ggJ =  std(gJ);" );
           ggJ =  std(gJ);
           //dbprint( 1, "//        ggJ = "+string(ggJ)+";" );
       
   
          if (testflags.equalTest)
          {
             dbprint(1,"ASSUME(0, idealsAreEqual(gI,ggI ));");
             ASSUME(0, idealsAreEqual(gI,ggI ));

             dbprint(1,"ASSUME(0, idealsAreEqual(gJ,ggJ ));");
             ASSUME(0, idealsAreEqual(gJ,ggJ ));
             
             
             dbprint(1,"ASSUME(0, idealsEqual(gI,ggI ));");
             ASSUME(0, idealsEqual(gI,ggI ));

             dbprint(1,"ASSUME(0, idealsEqual(gJ,ggJ ));");
             ASSUME(0, idealsEqual(gJ,ggJ ));
          }
      }

     if (not testflags.optionflagTest)
     {
        continue;
     }
      if ( hasGlobalOrdering(basering))
      {
  
          if ( optionIsSet("redSB") )
          {
               
                if (not idealRepresentationReducedTail(gI ) )
                {
                   dbprint( 1, "//        gI = "+string(gI) );
                }
               
                if (not idealRepresentationReducedTail(gJ ) )
                {
                   dbprint( 1, "//        gJ = "+string(gJ) );
                }

               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gI ));");
               ASSUME(0, idealRepresentationReducedTail( gI ));
               
               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gJ ));");
               ASSUME(0, idealRepresentationReducedTail( gJ ));


               dbprint(1,"ASSUME(0, idealRepresentationReduced( gI ));");
               ASSUME(0, idealRepresentationReduced( gI ));
               dbprint(1,"ASSUME(0, idealRepresentationReduced( gJ ));");
               ASSUME(0, idealRepresentationReduced( gJ ));
               
               
               if (testflags.repeatApplication)
               { 
       
                   dbprint(1,"ASSUME(0, size(gJ)== size(ggJ) );");
                   ASSUME(0, size(gJ)== size(ggJ) );
                   
                   dbprint(1,"ASSUME(0, size(gI)== size(ggI) );");
                   ASSUME(0, size(gI)== size(ggI) );

                  if (not idealRepresentationReducedTail(ggI ) )
                  {
                     dbprint( 1, "//        ggI = "+string(ggI) +";");
                  }
                  
                  if (not idealRepresentationReducedTail(ggJ ) )
                  {
                     dbprint( 1, "//        ggJ = "+string(ggJ) +";");
                  }
                  
                 dbprint(1,"ASSUME(0, idealRepresentationReducedTail( ggJ ));");
                 ASSUME(0, idealRepresentationReducedTail( ggJ ));
                 dbprint(1,"ASSUME(0, idealRepresentationReduced( ggI ));");
                 ASSUME(0, idealRepresentationReduced( ggI ));
                 dbprint(1,"ASSUME(0, idealRepresentationReduced( ggJ ));");
                 ASSUME(0, idealRepresentationReduced( ggJ ));
               
                
                  dbprint(1,"ASSUME(0, idealRepresentationReducedTail( ggI ));");
                  ASSUME(0, idealRepresentationReducedTail( ggI ));
             }
             
               /* 
               dbprint(1,"ASSUME(0, idealRepresentationsEqual(gI,ggI ));");
               ASSUME(0, idealRepresentationsEqual(gI,ggI ));
               dbprint(1,"ASSUME(0, idealRepresentationsEqual(gJ,ggJ ));");
               ASSUME(0, idealRepresentationsEqual(gJ,ggJ ));
               */
         

          }

      }
   


      if (testflags.testIntersect)
      {
        dbprint(1, "ASSUME(0, idealsEqual(intersect(I,J),intersect(gI,gJ) ) );");
        ASSUME(0, idealsEqual(intersect(I,J),intersect(gI,gJ) ) );

        dbprint(1,"ASSUME(0, idealsEqual(intersect(J,I),intersect(gJ,gI) ) );");
        ASSUME(0, idealsEqual(intersect(J,I),intersect(gJ,gI) ) );

        dbprint(1,"ASSUME(0, idealsAreEqual(intersect(I,J),intersect(gI,gJ) ) );");
        ASSUME(0, idealsAreEqual(intersect(I,J),intersect(gI,gJ) ) );

        dbprint(1,"ASSUME(0, idealsAreEqual(intersect(J,I),intersect(gJ,gI) ) );");
        ASSUME(0, idealsAreEqual(intersect(J,I),intersect(gJ,gI) ) );

   
   }

       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}

 

	 
proc testGroebnerAppend( getRng, gens, optionlist, trials, testflags, logfile )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
      def rng = getRng( );
      setring rng;
      option(warn);
      
    short = 0;
    int trial;

    while( 1 )
    {   
      option(nowarn);  
      kill rng;      
      def rng = getRng( );
      setring rng;
      ideal cs,  I, J,gI,IJ, gIJ, gI_J, Ip, gIp, gI_p; 
      poly p ;

      if ( hasGlobalOrLocalOrdering(basering))
      {
         chooseRandomOptionsFromList(optionlist);
      }
      if (warnIsSet)
      {
        option(warn);
      }
      
      
       if (defined(qrng)) {kill qrng; }
       write(":w "+logfile,emptystring);
       monitor(logfile,"io");
       write(":w "+logfile,emptystring);
       dbprint(1, "LIB \"primdec.lib\";");
       dbprint(1, "LIB \"wrappers.lib\";");
       dbprint(1, "LIB \"src/randomRing.lib\" ;");
       dbprint( 1, "ring rng = "  + string( basering)+";" );
       dbprint( 1, "short = 0 ;" );
      if ( not ("0" == string(minpoly) ))
       {
         dbprint( 1, "minpoly = " + string(minpoly) + ";");
       }
       dbprint( 1, "intvec op = "+string( option(get) )+";");           
       dbprint( 1, " option(set, op) ;");
       dbprint( 1, " option() ;");
       dbprint( 1, " // option() ;" + option() );
       dbprint( 1, "int trial = " + string( trial) + ";" );
       short = 0;
       I = gens.idealG( );
       J = gens.idealG( );
       p = gens.polyG();
       dbprint( 1, "system(\"random\", " + string( system("random") ) + ");" );
       dbprint( 1, "ideal I = " + string( I ) + ";" );
       dbprint( 1, "ideal J = " + string( J ) + ";" );
       dbprint( 1, "poly p = " + string( p ) + ";" );
       
       dbprint( 1, "   ideal gI   =  std(I);" );
       dbprint( 1, "   ideal IJ   = I+J;");
       dbprint( 1, "   ideal gIJ  = std(IJ);");
       dbprint( 1, "   ideal gI_J = std(gI,J);");
       dbprint( 1, "   ideal Ip   = I+p;");
       dbprint( 1, "   ideal gIp  = std(Ip);");
       dbprint( 1, "   ideal gI_p = std(gI,p);");

       gI =  std(I);
       IJ = I+J;
       gIJ = std(IJ);
       gI_J= std(gI,J);
       Ip = I+p;
       gIp  = std(Ip);
       gI_p = std(gI,p);

          if (hasIntegerCoefficientRing(basering))
          {
              dbprint( 1, " testLeadCoeffsNotNegative(gI);" );
              dbprint( 1, "    testLeadCoeffsNotNegative(gIp);" );
              dbprint( 1, "    testLeadCoeffsNotNegative(gIJ);" );
              dbprint( 1, "    testLeadCoeffsNotNegative(gI_p);" );

              testLeadCoeffsNotNegative(gI);
              testLeadCoeffsNotNegative(gIp);
              testLeadCoeffsNotNegative(gIJ);
              testLeadCoeffsNotNegative(gI_p);
          }


       if (testflags.reduceTest)
       {
           dbprint(1, "ASSUME(0, 0== size( std(reduce (I,gI ) ))  );");
           ASSUME(0, 0== size( std(reduce (I,gI ) ))  );


           dbprint(1, " ASSUME(0, 0== size( std(reduce (IJ,gIJ ) ))  ); ");
           ASSUME(0, 0== size( std(reduce (IJ,gIJ ) ))  );
           dbprint(1, " ASSUME(0, 0== size( std(reduce (IJ,gI_J ) ))  );");
           ASSUME(0, 0== size( std(reduce (IJ,gI_J ) ))  );
           dbprint(1, "ASSUME(0, 0== size( std(reduce (gI_J, gIJ) ))  ); ");
           ASSUME(0, 0== size( std(reduce (gI_J, gIJ) ))  );
         

           dbprint(1, " ASSUME(0, 0== size( std(reduce (Ip,gIp ) ))  ); ");
           ASSUME(0, 0== size( std(reduce (Ip,gIp ) ))  );

           dbprint(1, " ASSUME(0, 0== size( std(reduce (Ip,gI_p ) ))  );");
           ASSUME(0, 0== size( std(reduce (Ip,gI_p ) ))  );
           dbprint(1, "ASSUME(0, 0== size( std(reduce (gI_p, gIp) ))  ); ");
           ASSUME(0, 0== size( std(reduce (gI_p, gIp) ))  );
       }


       
       
        if (testflags.equalTest)
        {
        
             //if ( hasGlobalOrdering(basering))
             //{

             dbprint(1,"ASSUME(0, idealsEqual(gI_J,gIJ ));");
             ASSUME(0, idealsEqual(gI_J,gIJ ));

             dbprint(1,"ASSUME(0, idealsEqual(gIJ, gI_J));");
             ASSUME(0, idealsEqual(gIJ, gI_J ));

            dbprint(1,"ASSUME(0, idealsEqual(gI_p,gIp ));");
             ASSUME(0, idealsEqual(gI_p,gIp ));

             dbprint(1,"ASSUME(0, idealsEqual(gIp, gI_p));");
             ASSUME(0, idealsEqual(gIp, gI_p ));

             //}
       
       }


     if (not testflags.optionflagTest)
     {
        continue;
     }
     
      if ( hasGlobalOrdering(basering))
      {
  
          if ( optionIsSet("redSB") )
          {
 
                dbprint(1,"ASSUME(0, size(gI_J)== size(gIJ) );");
                ASSUME(0, size(gI_J)== size(gIJ)  );

                dbprint(1,"ASSUME(0, size(gI_p)== size(gIp) );");
                ASSUME(0, size(gI_p)== size(gIp)  );



                if (not idealRepresentationReducedTail(gI ) )
                {
                   dbprint( 1, "//        gI = "+string(gI) );
                }
                if (not idealRepresentationReducedTail(gIJ ) )
                {
                   dbprint( 1, "//        gIJ = "+string(gIJ) +";");
                }
                if (not idealRepresentationReducedTail(gI_J ) )
                {
                   dbprint( 1, "//        gI_J = "+string(gI_J) );
                }

                if (not idealRepresentationReducedTail(gIp ) )
                {
                   dbprint( 1, "//        gIp = "+string(gIp) +";");
                }
                if (not idealRepresentationReducedTail(gI_p ) )
                {
                   dbprint( 1, "//        gI_p = "+string(gI_p) );
                }

 

               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gI ));");
               ASSUME(0, idealRepresentationReducedTail( gI ));
               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gIJ ));");
               ASSUME(0, idealRepresentationReducedTail( gIJ ));
               
               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gI_J ));");
               ASSUME(0, idealRepresentationReducedTail( gI_J ));

               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gIp ));");
               ASSUME(0, idealRepresentationReducedTail( gIp ));
               
               dbprint(1,"ASSUME(0, idealRepresentationReducedTail( gI_p ));");
               ASSUME(0, idealRepresentationReducedTail( gI_p ));

            
               dbprint(1,"ASSUME(0, idealRepresentationReduced( gI ));");
               ASSUME(0, idealRepresentationReduced( gI ));
               dbprint(1,"ASSUME(0, idealRepresentationReduced( gIJ ));");
               ASSUME(0, idealRepresentationReduced( gIJ ));
               dbprint(1,"ASSUME(0, idealRepresentationReduced( gI_J ));");
               ASSUME(0, idealRepresentationReduced( gI_J ));

               dbprint(1,"ASSUME(0, idealRepresentationReduced( gIp ));");
               ASSUME(0, idealRepresentationReduced( gIp ));
               dbprint(1,"ASSUME(0, idealRepresentationReduced( gI_p ));");
               ASSUME(0, idealRepresentationReduced( gI_p ));

 
          }

      }


   /*
       dbprint(1,"ASSUME(0, idealRepresentationsEqual(gI,ggI ));");
       ASSUME(0, idealRepresentationsEqual(gI,ggI ));
       dbprint(1,"ASSUME(0, idealRepresentationsEqual(gJ,ggJ ));");
       ASSUME(0, idealRepresentationsEqual(gJ,ggJ ));

    dbprint(1, "ASSUME(0, idealsEqual(intersect(I,J),intersect(gI,gJ) ) );");
      ASSUME(0, idealsEqual(intersect(I,J),intersect(gI,gJ) ) );

         dbprint(1,"ASSUME(0, idealsEqual(intersect(J,I),intersect(gJ,gI) ) );");
      ASSUME(0, idealsEqual(intersect(J,I),intersect(gJ,gI) ) );

      dbprint(1,"ASSUME(0, idealsAreEqual(intersect(I,J),intersect(gI,gJ) ) );");
      ASSUME(0, idealsAreEqual(intersect(I,J),intersect(gI,gJ) ) );

      dbprint(1,"ASSUME(0, idealsAreEqual(intersect(J,I),intersect(gJ,gI) ) );");
      ASSUME(0, idealsAreEqual(intersect(J,I),intersect(gJ,gI) ) );

 */

       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}


