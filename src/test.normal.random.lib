


LIB("primdec.lib");
LIB("ringutils.lib");
LIB("wrappers.lib");
LIB("reslipman.lib");
LIB("randomIdeal.lib");
LIB("normal.lib");




proc testNormal( rng, idealG, trials   )
{
    dbprint(printlevel-voice+3, "testNormal");
    if (defined(basering) )
    { 
        def BAS=basering;
    }


    setring rng;
    export(rng);

    list ideals;

    int trial;
    int npos;
    def primes;
    def L, L1, L2 ;

    intvec v=1,1,1;
    def testResult;
    int printlevelOffset = 3 ; // required, since otherwise normal() prints dbinfo because it increases printlevel

    trial = 0;
    while( trial<trials )
    {   
       setring rng;
   
       if ( defined(J) ) { kill J; }
       ideal J = idealG();

       dbprint( printlevel - voice + printlevelOffset, "J ", J,"");

       // J = radical(j);
       // if  (isZero(j) ||  idealsAreEqual(ideal(1),j) || idealsAreEqual(ideal(1),slocus(j))  )
       if  (   idealsAreEqual(ideal(1), J)   )    
       {
          continue;
       }
       
     
 
           if ( (not isZero(J)) && (not idealsAreEqual(ideal(1),J)) && (not idealsAreEqual(ideal(1),slocus(J) ))  )
           //if (isPrime(J)   )  
           {
               dbprint(printlevel-voice+printlevelOffset, "J ", J);

               dbprint(printlevel-voice+printlevelOffset, "trial ", trial);

               if (char(rng)==0)
               {
                    
                    /* L1 = normalC(J);
                       testResult = norTest(J, L1);

                    dbprint(printlevel-voice+printlevelOffset, "normalC(J);= ", L1);
                    dbprint(printlevel-voice+printlevelOffset, "testResult= ", testResult);
                    ASSUME(0, v == testResult);
                    */

                    L2 = normal(J);

                    dbprint(printlevel-voice+printlevelOffset, "normal(J);= ", L2);

                   if ( isPrime(J) )
                   {
                      testResult = norTest(J, L2);
                      dbprint(printlevel-voice+printlevelOffset, "testResult= ", testResult);
                      ASSUME(0, v == testResult);  
                   }
               }
                else
                {
                   L1 = normalP(J,"withRing","noRed");


                    
                   dbprint(printlevel-voice+printlevelOffset, "normalP(J);= ", L1);
                   if ( isPrime(J) )
                   {
                      testResult = norTest( J, L1);
                      dbprint(printlevel-voice+printlevelOffset, "testResult= ", testResult);
                      ASSUME(0, v == testResult);
                   }

                }           
                dbprint(printlevel-voice+printlevelOffset, "trial ", trial);
                trial = trial+1;
               
        }
  
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}

proc testNormalWrapper(string cchar,string cord, )
{
     init_randomIdeal();
     int numVars = 2; 


      def rng = createRing(cchar,cord, numVars) ;


      def genParams = defaultIdealGeneratorParams();
      // adjust random ideal generator params:
      genParams.absMaxCoeff = 100;
      genParams.maxMonomialDegree = 4;
      genParams.maxTermsPerGen = 3;
      genParams.maxGens = 3;

      def idealG = idealGeneratorFromParams( genParams  );

      int trials = 10000;
      testNormal( rng, idealG, trials );
}


//option("nowarn");

TRACE = 0;
printlevel = 1;
echo = 0;

testNormalWrapper("3","dp");
testNormalWrapper("3","lp");
testNormalWrapper("3","Wp");
testNormalWrapper("3","Dp");

testNormalWrapper("0","dp");
testNormalWrapper("0","lp");
testNormalWrapper("0","Dp");

testNormalWrapper("5","dp");
testNormalWrapper("5","lp");
testNormalWrapper("5","Wp");





