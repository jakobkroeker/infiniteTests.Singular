/////////////////////
version="version test.char_series";
category="Commutative Algebra";
info="
";

LIB "primdec.lib";
LIB "ehv.lib";
LIB "randomideal.lib";
 

proc testCharSeries( getRng, idealG, trials, filename )
{
    int warnIsSet = optionIsSet("warn");
    if (defined(basering) ) {   def BAS=basering; }

    def rng = getRng( );
    setring rng;
    option(warn);
      
    short = 0;

    bigint trial;
    link l=":w "+filename;
    l;

    while( trial<trials )
    {  

       option(nowarn);  
       kill rng;      
       def rng = getRng( );
       setring rng;
       ideal cs,  I;

      if (warnIsSet)
      {
        option(warn);
      }

       //dbprint( 1, "basering: ", basering );
       monitor ("") ;
       l=":w "+filename;
       open(l);
       write(l,"");
       write(l,"");
       close(l);        
       monitor(filename,"io");
       dbprint(1, "LIB(\"primdec.lib\");");
       dbprint(1,"LIB(\"randomideal.lib\");");
       dbprint(1,"ring rng = "+string(basering)+";");
       dbprint(1,"bigint trial = "+string(trial)+";");
       ///dbprint( 1, "trial: ", trial );
       I = idealG( );
       dbprint( 1, "ideal I = "+string( I )+";");
       dbprint(1, "printIdealInfo( I ) ;");
       printIdealInfo(I);
       dbprint( 1,"ideal cs = char_series(I);");
       cs = char_series(I);
     
       monitor ("") ;
       trial = trial+1;
       //ASSUME(0, 0);
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}

/*
proc  testCharSeriesWrapper( cchar, ordering, numVars, genParams, trials )
{
    def rng = createRing( cchar,ordering, numVars ) ;

    def idealG = idealGeneratorFromParams( genParams  );

	testCharSeries( rng, idealG, trials);
}
*/
	

