version="version test.primdecGTZ.only.primdec";
category="Commutative Algebra";
info="
";

LIB "randomIdeal.lib";
LIB "primdec.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";
LIB "ehv.lib";


 
proc testPrimdecZeroDim( numVars, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials )
{
    print ("testPrimdecZeroDim");
    if (defined(basering) ) {   def BAS=basering; }

    def rng = createRing("0","dp", numVars) ;
    setring rng;
    export(rng);

    list ideals;

    int trial;

    // generating only zerodimensional ideals:
    for (trial = 1; trial<=trials; trial=trial)
    {   
       setring rng;
       print ("trial: "+string(trial));
       if ( defined(j) ) { kill j; }
       basering;
       system("random");
       ideal j = randomIdeal(  random(1, maxGens) , random(1, absMaxCoeff) , random(0, maxMonomialDegree), random(1, maxTermsPerGen)  );
     
       if ( dimIdeal(j)==0 )
       {
          print(" dimIdeal(j)=0" );
          trial=trial+1;
		  zerodec(j); 
       }
    }

    if (defined(BAS)) {  setring BAS; }
    return(1);
}


proc testPrimdec( rng, idealG, trials )
{
    print ("testPrimdec");
    if (defined(basering) ) {   def BAS=basering; }


    setring rng;
    export(rng);

    list ideals;

    int trial;
    list L1,L2,L3;
    ideal I;
    //for (trial = 1; trial<=trials; trial++)
    while(1)
    {   
       setring rng;
       print ("trial: "+string(trial));
       if ( defined(j) ) { kill j; }
       ideal I = idealG(  );
       //system("random", random(0,5000000) ) ;
       //system("random" ) ;
       dbprint(1, "basering:",basering,"");
       dbprint(1, "I:", I,"");

       if (not isZero(I) && not idealsAreEqual( ideal(1), I ) )
       {
            L1 = primdecGTZ(I);
            testPrimdecEx(L1,I);
            L2 = primdecSY(I);
            testPrimdecEx(L2,I);
            ASSUME(0, primDecsAreEquivalent(L1,L2) );
            trial = trial+1;
           // L3 = primdecEHV(j);
           //ASSUME(0, primDecsAreEquivalent(L1,L3) );      
       }
      
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}



/*

proc testPrimdecWrapper(rng)
{
      def genParams = defaultIdealGeneratorParams();
      // adjust random ideal generator params:
      genParams.maxGens = 4; 
      genParams.absMaxCoeff = 14;
      genParams.maxMonomialDegree = 3;
      genParams.maxTermsPerGen = 4;

      def idealG = idealGeneratorFromParams( genParams  );
 
  	int trials = 300000;

    //def rng = createRing(cchar,cord, numVars) ;

	testPrimdec( rng, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials );

}


monitor("log/test.primdecGTZ.only.primdec.out.00","io");
system("random");
option("redSB");

//echo = 0;
printlevel = 0 ;
TRACE=0;
int numVars = 3;

def rng = createRing("0","(dp(2),dp(1))", numVars) ;
testPrimdecWrapper(rng);

def rng = createRing("0","(lp(2),lp(1))", numVars) ;
testPrimdecWrapper("0","dp");

while true; do ./singular-spielwiese < input/test.primdecGTZ.only.primdec.02

*/


