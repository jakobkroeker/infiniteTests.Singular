
echo = 0;
option("redSB");


LIB("ringutils.lib");
LIB("primdec.lib");
LIB("ehv.lib");
LIB("wrappers.lib");
LIB("randomIdeal.lib");
 

proc testRadicalKL( rng, idealG, trials )
{
    print ("testRadicalKL");
    if (defined(basering) ) {   def BAS=basering; }

    setring rng;
    export(rng);

    int trial;
    ideal rI, rIkl, I;
    while(1)
    {   
       dbprint(1, "trial: ", trial );
       setring rng;
       I = idealG( );
       I;
       rI = radical(I);;  
       rIkl = radical(I,"KL");
       if (not  isRadical(rIkl )  ) 
       { 
            print("testRadicalKL failed for I= "); I;    basering;
       }

       ASSUME(0, isRadical(rI));
       ASSUME(0, isRadical(rIkl));
       ASSUME(0, idealsAreEqual(rI,  rIkl));
       trial = trial+1;

    }

    if (defined(BAS)) {  setring BAS; }
    return(1);
}


proc testRadicalKlWrapper( cchar, ordering )
{
    init_randomIdeal();
    int numVars = 3;
    def rng = createRing( cchar,ordering, numVars ) ;
    // seems doable
    def genParams = defaultIdealGeneratorParams();
    // adjust random ideal generator params:
    genParams.absMaxCoeff = 14;
    genParams.maxMonomialDegree = 5;
    genParams.maxTermsPerGen = 3;
    genParams.maxGens = 3;
    int trials = 1000000;
    def idealG = idealGeneratorFromParams( genParams  );
	testRadicalKL( rng, idealG,trials);
}

	printlevel = 0 ;
    TRACE = 0;

testRadicalKlWrapper("0", "lp");
testRadicalKlWrapper("3", "lp");
testRadicalKlWrapper("23","Dp");



