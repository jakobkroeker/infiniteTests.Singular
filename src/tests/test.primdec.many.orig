version="version test.primdecGTZ.only.primdec";
category="Commutative Algebra";
info="
";

LIB "randomideal.lib";LIB "primdec.lib";LIB "ringutils.lib";LIB "wrappers.lib";LIB "ehv.lib";

proc adjustAssumeLevel()
{
    if (not (defined(assumeLevel) ) ) 
    {
       def Top::assumeLevel = 3;
       export (Top::assumeLevel);
    }
    else
    {
       if (assumeLevel==0)
       { 
          assumeLevel = 3;
       }
    }
}

//proc wDecompE (I)         {    return ( Primdec::decompE(I) );     }
proc wDecomp (I)          {    return ( Primdec::convList(Primdec::decomp(I) ) );     }


proc primdecGTZEkeepKomp (I)         {    return ( primdecGTZE(I,"keep_comp") );     }
proc primdecGTZkeepKomp (I)          {    return ( primdecGTZ (I,"keep_comp") );     }

proc minAssGTZEFacSTD (I)            {    return ( minAssGTZE(I,"facstd") );         }
proc minAssGTZFacSTD  (I)            {    return ( minAssGTZ (I,"facstd") );         }

proc minAssGTZEnoFacSTD (I)          {    return ( minAssGTZE(I,"noFacstd") );       }
proc minAssGTZnoFacSTD  (I)          {    return ( minAssGTZ (I,"noFacstd") );       }

proc minAssGTZEorigNoFacSTD (I)      {    return ( minAssGTZE(I,"GTZ","noFacstd") ); }
proc minAssGTZorigNoFacSTD (I)       {    return ( minAssGTZ (I,"GTZ","noFacstd") ); }

proc minAssGTZEGTZ (I)               {    return ( minAssGTZE(I,"GTZ") );            }
proc minAssGTZGTZ  (I)               {    return ( minAssGTZ (I,"GTZ") );            }

proc primdecSYENoOptimalOrdering (I) {    return ( primdecSYE(I,0) );                }
proc primdecSYNoOptimalOrdering  (I) {    return ( primdecSY (I,0) );                }

proc minAssCharENoOptimalOrdering(I) {    return ( minAssCharE(I,0) );               }
proc minAssCharNoOptimalOrdering (I) {    return ( minAssChar (I,0) );               }

proc primdecEUsingMinAssChar  (I)    {    return ( Primdec::prim_dec_i(1,I,0) );        }
proc primdecUsingMinAssChar   (I)    
{
      if (defined(Primdec::prim_dec_i)) { return ( Primdec::prim_dec_i(0,I,0) );      }
      else { return ( Primdec::prim_dec(I,0) );      }
}


proc minAssGTZorig      (I)          {    return ( minAssGTZ(I,"GTZ") );              }


proc minAssPrimesNew  (I)           {    return ( Primdec::minAssPrimesE(I) );        }
proc minAssPrimesOrig (I)           {    return ( Primdec::minAssPrimes(I) );         }


proc minAssPrimesOldNew  (I)        {    return ( Primdec::minAssPrimesoldE(I) );    }
proc minAssPrimesOldOrig (I)        {    return ( Primdec::minAssPrimesold (I) );    }

proc minAssNew  (I)                 {    return ( Primdec::minAssE(I) );             }
proc minAssOrig (I)                 {    return ( Primdec::minAss (I) );             }


proc minAssPrimCharsetsECurrentOrd(I)    {    return ( Primdec::min_ass_prim_charsets_i(1,I,0)) ; }
proc minAssPrimCharsetsCurrentOrd (I)    {    return ( Primdec::min_ass_prim_charsets_i(0,I,0)) ; }

proc minAssPrimCharsetsEOptimalOrd (I)    {    return ( Primdec::min_ass_prim_charsets_i(1,I,1)) ; }
proc minAssPrimCharsetsOptimalOrd  (I)    {    return ( Primdec::min_ass_prim_charsets_i(0,I,1)) ; }


proc minAssPrimCharsets0New  (I)    {    return ( Primdec::min_ass_prim_charsets0_i(1,I,0)) ; }
proc minAssPrimCharsets0Orig (I)    {    return ( Primdec::min_ass_prim_charsets0_i(0,I,0)) ; }

proc minAssPrimCharsets1New   (I)   {    return ( Primdec::min_ass_prim_charsets1_i(1,I,1)) ; }
proc minAssPrimCharsets1Orig  (I)   {    return ( Primdec::min_ass_prim_charsets1_i(0,I,1)) ; }

 
proc testPrimdecZeroDim( numVars, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials )
{
    print ("testPrimdecZeroDim");
    if (defined(basering) ) {   def BAS=basering; }

    def rng = createRing("0","dp", numVars) ;
    setring rng;
    export(rng);

    list ideals;

    int trial;

    // generating only zerodimensional ideals:
    for (trial = 1; trial<=trials; trial=trial)
    {   
       setring rng;
       print ("trial: "+string(trial));
       if ( defined(j) ) { kill j; }
       basering;
       system("random");
       ideal j = randomIdeal(  random(1, maxGens) , random(1, absMaxCoeff) , random(0, maxMonomialDegree), random(1, maxTermsPerGen)  );
     
       if ( dimIdeal(j)==0 )
       {
          print(" dimIdeal(j)=0" );
          trial=trial+1;
          zerodec(j); 
       }
    }

    if (defined(BAS)) {  setring BAS; }
    return(1);
}


proc testPrimdec( rng, idealG, trials, ol )
{
    print ("testPrimdec");
    adjustAssumeLevel();
    if (defined(basering) ) {   def BAS=basering; }

    setring rng;
    export(rng);

    list ideals;

    int trial,i;
    list L1,L2,L3;
    list PL,ML;
    
    def wdec;

    def minAss1,minAss1e;

    ideal I;
    string emptystring="";
    // while (trial<trials)
    while(1)
    {   
       setring rng;
       I = idealG(  );
       //system("random", random(0,5000000) ) ;
       //system("random" ) ;         

       if (not isZero(I) && not idealsAreEqual( ideal(1), I ) )
       {
           ol.clearX();
           ol.writeX( "");
           ol.writeX( "");
           ol.writeX( "////////////////////////////////////////////////////////////////////////////////////////");
           ol.writeX( "def assumeLevel = "+string( assumeLevel ) + ";" );
           ol.writeX( " // voice = "+string( voice ) + ";" );
           ol.writeX( "system(\"random\","+string( system("random") ) + ");" );
           ol.writeX( "//random: "+ string( system("random") )  );
           ol.writeX( "LIB(\"src/tests/test.primdec.many.orig\");");
           ol.writeX( "intvec op = "+string( option(get) )+";");
           ol.writeX( "ring rng = "+string(basering)+";");
           ol.writeX( "ideal I = "+string(I)+";");
           ol.writeX( "bigint trial = "+string(trial)+";");
           ol.writeX( "    def minAss1,minAss1e;");

             ol.writeX( "list  PL,ML;");

             if (defined(PL)) {kill PL;}
             if (defined(ML)) {kill ML;}
             list PL,ML;
             
             ol.writeX( "  PL[size(PL)+1] = list(\"primdecGTZ (I)\",primdecGTZ (I));");
                           PL[size(PL)+1] = list("primdecGTZ (I)",primdecGTZ (I)) ;



             ol.writeX( "  PL[size(PL)+1] = list(\"primdecGTZkeepKomp (I)\",primdecGTZkeepKomp (I));");
                           PL[size(PL)+1] = list("primdecGTZkeepKomp (I)",primdecGTZkeepKomp (I)) ;

             if  (hasGlobalOrdering(basering))
             {
                 ol.writeX( "  PL[size(PL)+1] = list(\"primdecUsingMinAssChar (I)\",primdecUsingMinAssChar (I));");
                               PL[size(PL)+1] = list("primdecUsingMinAssChar (I)",primdecUsingMinAssChar (I)) ;
             }
             ol.writeX( "  PL[size(PL)+1] = list(\"primdecSY (I)\",primdecSY (I));");
                           PL[size(PL)+1] = list("primdecSY (I)",primdecSY (I)) ;

             ol.writeX( "  PL[size(PL)+1] = list(\"primdecSYNoOptimalOrdering (I)\",primdecSYNoOptimalOrdering (I));");
                           PL[size(PL)+1] = list("primdecSYNoOptimalOrdering (I)",primdecSYNoOptimalOrdering (I)) ;

             ol.writeX( "ASSUME(0, testPrimary( PL[1][2] , I ) );");
            ASSUME(0, testPrimary( PL[1][2] , I ) );
            for (i=1;i<size(PL);i++)
            { 
                ol.writeX( "ASSUME(0, primDecsAreEquivalent(PL["+string(i)+"][2],PL["+string(i+1)+"][2]));");
                        ASSUME(0, primDecsAreEquivalent(  PL[i][2],  PL[i+1][2]  )   );
            }


            ol.writeX( "ML[size(ML)+1] = list(\"minAssGTZ (I)\",minAssGTZ (I)) ;");
                        ML[size(ML)+1] = list("minAssGTZ (I)",minAssGTZ (I)) ;
 

            ol.writeX( "ML[size(ML)+1] = list(\"minAssGTZFacSTD (I)\",minAssGTZFacSTD (I));");
                        ML[size(ML)+1] = list("minAssGTZFacSTD (I)",minAssGTZFacSTD (I)) ;
 

            ol.writeX( "ML[size(ML)+1] = list(\"minAssGTZGTZ (I)\",minAssGTZGTZ (I));");
                        ML[size(ML)+1] = list("minAssGTZGTZ (I)",minAssGTZGTZ (I)) ;
 


            ol.writeX( "ML[size(ML)+1] = list(\"minAssChar (I)\",minAssChar (I));");
                        ML[size(ML)+1] = list("minAssChar (I)",minAssChar (I)) ;
 

            ol.writeX( "ML[size(ML)+1] = list(\"minAssCharNoOptimalOrdering (I)\",minAssCharNoOptimalOrdering (I));");
                        ML[size(ML)+1] = list("minAssCharNoOptimalOrdering (I)",minAssCharNoOptimalOrdering (I)) ;


            for (i=1;i<size(ML);i++)
            { 
                ol.writeX( "ASSUME(0, minAssDecompAreEquivalent(ML["+string(i)+"][2],ML["+string(i+1)+"][2]));");
                        ASSUME(0, minAssDecompAreEquivalent(ML[i][2],ML[i+1][2]));
            }


         
            ol.writeX( "minAss1  = minAss(I);");
                        minAss1  = minAss(I);


            trial++;
       }
      
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}


