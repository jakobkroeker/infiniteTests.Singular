/////////////////////
version="version test.reslipman.isPrime";
category="Commutative Algebra";
info="
";


//LIB "ringutils.lib" ;

LIB "primdec.lib";
LIB "ehv.lib";
//LIB "wrappers.lib" ;
LIB "randomIdeal.lib";
LIB "reslipman.lib";



proc reconstructPoly( list l )
{
  int i ;
  poly result=1;

  for(i=1;i<=size(l[1]);i++)
  {
     result = result*(l[1][i])^(l[2][i]);
  }
  return(result);
}

 

proc testIsPrime( getRng, idealG, trials )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
    def rng = getRng( );
    setring rng;      

    int trial;
    
    while(1)
    {   
        option(nowarn);
        def rng = getRng( );
        setring rng;           
        
       if (warnIsSet)      {        option(warn);      }
       
       ol.clearX();
       ol.writeX( "");
       ol.writeX( "");
      
       ol.writeX( "LIB \"wrappers.lib\";");
       ol.writeX( "LIB \"src/randomRing.lib\" ;");
       ol.writeX( "LIB \"src/tests/test.reslipman.isPrime\" ;"); 
       
       ideal Q = std( idealG( ) );
       qring r = Q;       
       ol.writeX(  ringToStringHack (basering) );

       ideal I = idealG( );
       
       ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
       ol.writeX( "ideal I = " + string( I ) + ";" );
       ol.writeX( "ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );
       
       ol.writeX( " isPrime(I);");
       isPrime(I);
       trial = trial + 1;
    }

    if (defined(BAS)) {  setring BAS; }
    return(1);
}



//	printlevel = 0 ;
//    TRACE = 0;

// testIsPrimeWrapper("0", "dp");
// testIsPrimeWrapper("3", "lp");
// testIsPrimeWrapper("23","Dp");



