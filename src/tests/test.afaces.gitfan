/////////////////////
version="version test.afaces.gitfan";
category="Commutative Algebra";
info="
";



LIB("primdec.lib");
LIB("ringutils.lib");
LIB("wrappers.lib");
LIB("gitfan.lib");
 


proc testAfaces( getRng, gens, ol )
{  
    int warnIsSet = optionIsSet("warn");
     option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }

    def rng = getRng() ;
        
    setring rng;
    option("redSB");    

    while(1)
    {   
       option(nowarn);  
       rng = getRng() ;
       setring rng;
       
       if (warnIsSet)      {        option(warn);      }
       
       ol.clearX();
       ol.writeX( "");
       ol.writeX( "");
      
       ol.writeX( "LIB \"wrappers.lib\";");
       ol.writeX( "LIB \"src/randomRing.lib\" ;");
       ol.writeX( "LIB \"src/tests/test.afaces.gitfan\" ;");
       ol.writeX(  ringToStringHack (basering) );
       ol.writeX( "int trial = " + string( trial) + ";" );
       if ( defined(I) ) { kill I; }
       ideal I = gens.idealG();
       ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
       ol.writeX( "ideal I = " + string( I ) + ";" );
       ol.writeX( "  ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );

       if (not isZero(j) && not idealsAreEqual(ideal(1),I) )
       {
            ol.writeX( "L1 = afaces(I); " );
            L1 = afaces(I);             
       }
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}

/*
proc testAfacesWrapper(cchar,cord)
{

	// seems doable
	int numVars = 3;
	int maxGens = 4;
	int maxTermsPerGen = 3;
	int maxMonomialDegree = 3;
	int absMaxCoeff = 14;
	int trials = 300000;
	testAfaces( numVars, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials,cchar,cord);
}

printlevel = 0 ;
TRACE=1;
testAfacesWrapper("0","lp");
testAfacesWrapper("0","dp");
*/
