/////////////////////
version="version test.factorize.lib";
category="Commutative Algebra";
info="
";

// LIB "src/wrappers.lib";
//LIB "src/automatedTests.lib";

proc createRingX(string charStr, string modulus, string monomialOrderStr, int numOfVariables )
{
   def varNames=getVariableNames(numOfVariables);
   def varStr = "(" + assembleStringArray( varNames, "," ) + ")" ;
   string cmd = "ring rng = " + charStr + "," + varStr + "," + monomialOrderStr + ";";
   execute (cmd);
   string cmd = "minpoly = " + modulus  + ";";
   execute (cmd);
   return (rng);
}


proc reconstruct(fp)
{

  ASSUME(0, size(fp)==2 );
  int fpsize = size(fp[1]);
 
  poly result=1;
  int pos;
  for (pos=1;pos<=fpsize;pos++)
  {
     result = result*(fp[1][pos])^(fp[2][pos]);
  }
  return (result);
}


proc testFactorsIrreducible(list fp)
{
  int i = 0;
  def result, rfp, quot,pfp;
  ol.writeX( "def pfp, result;");
  for (i=2; i <= size( fp[1] ); i++)
  {
     pfp = fp[1][i];
     ol.writeX( "pfp = " +string(pfp)+ ";");
     ol.writeX( "result = factor( pfp );");          
     result = factorize( pfp );
     ol.writeX( "ASSUME(0, 2==size(result[1]) );");          
     ASSUME(0, size(result[1])==2); 
     ol.writeX( "rfp  = reconstruct(result);");          
     rfp  = reconstruct(result);
     //ol.writeX( " quot = p/rfp;");          
     //quot = p/rfp;

       if ( (not (pfp == rfp)) 
//       ||       (not (idealsAreEqual( ideal(pfp), ideal(rfp) )))
          )
       {
         ol.writeX( "// pfp = " + string( pfp) + ";");    
         ol.writeX( "// rfp = " + string(rfp) +";");
         //ol.writeX( " ASSUME(0, idealsAreEqual( ideal(pfp), ideal(rfp) ));");
         ol.writeX( " ASSUME(0, pfp == rfp) ;");                  
         //ASSUME(0, idealsAreEqual( ideal(pfp), ideal(rfp) ));
         ASSUME(0, pfp == rfp);
       }      
  }
  return ();
}


proc testFactorsUniq(list fp)
{
  int i = 0;
  int j = 0;
  def result, pfp, fpf;
  ol.writeX( "def pfp,fpf, result;");
  for (i=2; i <= size( fp[1] ); i++)
  {
     pfp = fp[1][i];
     
     for (j=2; j <= size( fp[1] ); j++)
     {
   
         if (j != i)
         {
             fpf = fp[1][j];
             if (  deg(gcd(pfp,fpf))>0)
             {
               ol.writeX( "pfp = " +string(pfp)+ ";");
               ol.writeX( "fpf = " +string(fpf)+ ";");
               ol.writeX( "// ERROR: 0 < deg gcd ( fp[1]["+string(i)+"], fp[1]["+string(j)+"] ) !");
               ol.writeX( "ASSUME(0, deg(gcd(pfp,fpf))<=0 );");
               ASSUME( 0, deg( gcd(pfp,fpf) ) <= 0 );
             }
         }
     }
  }
  return ();
}




proc testFactorize( getRng, gens,  ol);
{
    ol.writeX(  " // testFactorize");
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
    def rng = getRng(gens);
    setring rng;
    option(warn);
      
    short = 0;
    int trial;

    while( 1 )
    {   
       option(nowarn);  
       kill rng;      
       def rng = getRng(gens);
       setring rng;
       ol.clearX();
       ol.writeX( "");
       ol.writeX( "");

       ol.writeX( "LIB(\"primdec.lib\");");
       ol.writeX( "LIB(\"src/wrappers.lib\");");
       ol.writeX( "LIB(\"src/automatedTests.lib\");");
       ol.writeX( "ring rng = "  + string( basering )+";" );
       ol.writeX( "short = 0 ;" );
       ol.writeX( "minpoly = " + string(minpoly) + ";");
       ol.writeX( "intvec op = "+string( option(get) )+";");    
       ol.writeX( " option(set, op) ;");
       ol.writeX( " option() ;");
       ol.writeX( " // option() :" + option() );
       ol.writeX( "int trial = " + string( trial) + ";" );
       
       ol.writeX( " poly p; list fp; poly quot; poly rfp;" );
       short = 0;
       
       if ( defined(p) ) { kill p; }
       poly p = gens.polyG();
       ol.writeX( " poly p = "+string(p)+";" );
       if ( idealsAreEqual( ideal(p), ideal(0) ) ) {continue;}
       ol.writeX( "trial =", trial );
       ol.writeX( " def fp = factorize(p);" );       
       def fp = factorize(p);
       ol.writeX( "");
       ol.writeX( " //  num factors  = "+string(size(fp[1])));
       ol.writeX( "");
       // if (string(minpoly) != "0" )      {      ASSUME(0, 2 >= size(fp[1]));       }
       ol.writeX( "rfp =reconstruct(fp);");     
       def rfp  = reconstruct(fp);

       //ol.writeX( "quot= p/rfp;");     
       //def quot = p/rfp;

       
       if ( (not (p == rfp)) 
//        ||          (not (idealsAreEqual( ideal(p), ideal(rfp) )))
          )
       {
         ol.writeX( "// fp ="+string( fp)+ ";");    
         ol.writeX( "// quot ="+string( quot)+ ";");     
         ol.writeX( "// rfp="+ string(rfp)+";");
         //ol.writeX( " ASSUME(0, idealsAreEqual( ideal(p), ideal(rfp) ));");
         ol.writeX( " ASSUME(0,p == rfp) ;");                  
  //       ASSUME(0, idealsAreEqual( ideal(p), ideal(rfp) ));
         ASSUME(0, p == rfp);
       }        
       
       testFactorsIrreducible(fp);
       testFactorsUniq(fp);
           
       trial = trial + 1;
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}



