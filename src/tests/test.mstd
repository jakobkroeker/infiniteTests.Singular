/////////////////////
version="version test.std";
category="Commutative Algebra";
info="
";

LIB "primdecint.lib";
LIB "randomIdeal.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";
 
proc testMStd( getRng, gens, optionlist, trials, basic, ol )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
      def rng = getRng( );
      setring rng;
      option(warn);
      
    short = 0;
    int trial;

    while( 1 )
    {   
      option(nowarn);  
      kill rng;      
      def rng = getRng( );
      setring rng;
      ideal cs,  I, J, gI, gJ, ggI, ggJ, mgI,mggI, mgJ,mggJ;
      list lmgI, lmggI;

      if ( hasGlobalOrdering(basering))
      {
         chooseRandomOptionsFromList(optionlist);
      }
      if (warnIsSet)
      {
        option(warn);
      }
      
     
       ol.clearX();
       ol.writeX( "");
       ol.writeX( "");

       ol.writeX( "LIB \"primdec.lib\";");
       ol.writeX( "LIB \"wrappers.lib\";");
       ol.writeX( "LIB \"src/randomRing.lib\" ;");
       ol.writeX( "ring rng = "  + string( basering)+";" );
       ol.writeX( "short = 0 ;" );
       ol.writeX( "minpoly = " + string(minpoly) + ";");
       ol.writeX( "intvec op = "+string( option(get) )+";");           
       ol.writeX( " option(set, op) ;");
       ol.writeX( " option() ;");
       ol.writeX( " // option() ;" + option() );
       ol.writeX( "int trial = " + string( trial) + ";" );
       short = 0;
       I = gens.idealG( );
       ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
       ol.writeX( "ideal I = " + string( I ) + ";" );
       
       ol.writeX( "       list mgI =  mstd(I);" );
       ol.writeX( "   gI =  lmgI[1];");
       ol.writeX( "   mgI =  lmgI[2];");
       lmgI = mstd(I);
       gI =  lmgI[1];
       mgI = lmgI[2];
       //ol.writeX( "//        gI = "+string(gI) );
       ol.writeX( "       list lmggI =  mstd(gI);" );
       ol.writeX( "   ggI =  lmggI[1];");
       ol.writeX( "   mggI =  lmggI[2];");
       lmggI =  mstd(gI);
       ggI = lmggI[1];
       mggI =  lmggI[2];
       //ol.writeX( "//        ggI = "+string(ggI) +";");

       ol.writeX( "ASSUME(0, 0== size( std(reduce (I,gI ) ))  );");
       ASSUME(0, 0== size( std(reduce (I,gI ) ))  );

       ol.writeX( "ASSUME(0, 0== size( std(reduce (mgI,gI ) ))  );");
       ASSUME(0, 0== size( std(reduce (mgI,gI ) ))  );

       
       //if ( hasGlobalOrdering(basering))
       //{

       //}
   
       ol.writeX("ASSUME(0, idealsAreEqual(gI,ggI ));");
       ASSUME(0, idealsAreEqual(gI,ggI ));

       ol.writeX("ASSUME(0, idealsAreEqual(mggI,ggI ));");
       ASSUME(0, idealsAreEqual(mggI,ggI ));

       
       
       ol.writeX("ASSUME(0, idealsEqual(gI,ggI ));");
       ASSUME(0, idealsEqual(gI,ggI ));




      if (not (checkRedSB))
      {
         continue;
      }
      //if ( hasGlobalOrdering(basering))
      //{
  
          if ( optionIsSet("redSB") )
          {
 
                ol.writeX("ASSUME(0, size(gI)== size(ggI) );");
                ASSUME(0, size(gI)== size(ggI) );


                if (not idealRepresentationReducedTail(gI ) )
                {
                   ol.writeX( "//        gI = "+string(gI) );
                }
                if (not idealRepresentationReducedTail(ggI ) )
                {
                   ol.writeX( "//        ggI = "+string(ggI) +";");
                }

               ol.writeX("ASSUME(0, idealRepresentationReducedTail( gI ));");
               ASSUME(0, idealRepresentationReducedTail( gI ));
               ol.writeX("ASSUME(0, idealRepresentationReducedTail( ggI ));");
               ASSUME(0, idealRepresentationReducedTail( ggI ));
               

               ol.writeX("ASSUME(0, idealRepresentationReduced( gI ));");
               ASSUME(0, idealRepresentationReduced( gI ));
               ol.writeX("ASSUME(0, idealRepresentationReduced( ggI ));");
               ASSUME(0, idealRepresentationReduced( ggI ));
          }

      //}


   /*
       ol.writeX("ASSUME(0, idealRepresentationsEqual(gI,ggI ));");
       ASSUME(0, idealRepresentationsEqual(gI,ggI ));
       ol.writeX("ASSUME(0, idealRepresentationsEqual(gJ,ggJ ));");
       ASSUME(0, idealRepresentationsEqual(gJ,ggJ ));

    ol.writeX( "ASSUME(0, idealsEqual(intersect(I,J),intersect(gI,gJ) ) );");
      ASSUME(0, idealsEqual(intersect(I,J),intersect(gI,gJ) ) );

         ol.writeX("ASSUME(0, idealsEqual(intersect(J,I),intersect(gJ,gI) ) );");
      ASSUME(0, idealsEqual(intersect(J,I),intersect(gJ,gI) ) );

      ol.writeX("ASSUME(0, idealsAreEqual(intersect(I,J),intersect(gI,gJ) ) );");
      ASSUME(0, idealsAreEqual(intersect(I,J),intersect(gI,gJ) ) );

      ol.writeX("ASSUME(0, idealsAreEqual(intersect(J,I),intersect(gJ,gI) ) );");
      ASSUME(0, idealsAreEqual(intersect(J,I),intersect(gJ,gI) ) );

 */

       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}

 

	

