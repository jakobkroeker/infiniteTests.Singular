/////////////////////
version="version test.normalZ.lib";
category="Commutative Algebra";
info="
";



LIB "primdec.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";
LIB "reslipman.lib";
LIB "randomIdeal.lib";



proc testNormalZ( getRng, gens, maxTrialsPerRing, ol )
{

    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
    def rng = getRng( );
    setring rng;
    option(warn);    
    int trial;

    trial = 0;
    while( 1 )
    {   
        option(nowarn);  
        kill rng;      

        ol.writeX( " // getRng() ;");

        def rng = getRng( );
        setring rng;
        
        if (warnIsSet)      {        option(warn);      }
        
        ol.clearX();
        ol.writeX( "");
        ol.writeX( "");

        ol.writeX( "LIB \"wrappers.lib\";");
        ol.writeX( "LIB \"src/randomRing.lib\" ;");
        ol.writeX( "LIB \"src/tests/test.normalZ.lib\" ;"); 
        ol.writeX(  ringToStringHack (basering) );
        ol.writeX( "int trial = " + string( trial) + ";" );
        short = 0;       
        
        ideal I = gens.idealG();       
        ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
        ol.writeX( "ideal I = " + string( I ) + ";" );
        ol.writeX( "  ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );

        ol.writeX( " def rI = Radical(I);");
        def rI = Radical(I);             
        ol.writeX( " //  rI = " + string( rI ) + ";" );

        if  (isZero(rI) ||  idealsAreEqual(ideal(1),rI)   )
        //if  (   idealsAreEqual( ideal(1) , rI )   )    
        {
            continue;
        }

        ol.writeX( " def L = normalZ(rI); ");
        def L = normalZ(rI);
        trial = trial + 1;
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}

/*
proc testNormalZWrapper(string cchar,string cord)
{
    int numVars = 3;

    init_randomIdeal();
             
    def genParams= defaultIdealGeneratorParams();
    genParams.absMaxCoeff = 10;
    genParams.maxMonomialDegree = 3;
    genParams.maxTermsPerGen = 3;
    genParams.maxGens = 3;
    def idealG = idealGeneratorFromParams( genParams  );
	
	int maxGens = 3;
	int maxTermsPerGen = 3;
	int maxMonomialDegree = 3;
	int absMaxCoeff = 10;
	int trials = 3000;
	testNormalZ( numVars, idealG, trials, cchar, cord);
}


//option("nowarn");

TRACE=0;
printlevel = 2;
echo = 0;

testNormalZWrapper("integer","dp");
testNormalZWrapper("integer","lp");
testNormalZWrapper("integer","Dp");
*/






