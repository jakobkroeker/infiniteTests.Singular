/////////////////////
version="version test.genus.normal";
category="Commutative Algebra";
info="
";


LIB "ringutils.lib";
LIB "primdec.lib";
LIB "ehv.lib";
//LIB "wrappers.lib";
LIB "randomIdeal.lib";
 

proc weakGenusTest( getRng, idealG, trialsPerRing, ol )
{  
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if ( defined(basering) ) {   def BAS=basering; }
    def rng = getRng( );
    setring rng;
    option(warn);
      
    while( 1)
    {   
        option(nowarn);  
        kill rng;      

        ol.writeX( " // getRng() ;");
        def rng = getRng( );
        setring rng;
        if (warnIsSet)      {        option(warn);      }
        
        def g1, g2, g3, I, I1, EI;
      
        ol.writeX( "LIB \"wrappers.lib\";");
        ol.writeX( "LIB \"src/randomRing.lib\" ;");
        ol.writeX( "LIB \"src/tests/test.genus.normal\" ;"); 
        ol.writeX(  ringToStringHack (basering) );
        ol.writeX( "int trial = " + string( trial) + ";" );
        short = 0;
        ideal I = idealG();
        ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
        ol.writeX( "ideal I = " + string( I ) + ";" );
        ol.writeX( "  ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );
        
        EI = equidim(I)[1];
        
        if ( dim(std(EI)) != 1 ) { continue; }

        ol.writeX( "  def I1 = minAssGTZ(EI)[1];");
        ol.writeX( "  def EI = equidim(I1)[1];");
        I1 = minAssGTZ(EI)[1];        
        EI = equidim(I1)[1];

        trial = trial+1;
        
        ol.writeX( "     def g1 = genus(EI);");
        ol.writeX( "     def g2 = genus(EI,\"nor\");");
        ol.writeX( "     def g3 = genus(EI,\"pri\");");
        ol.writeX( " ASSUME(0, g1==g2);");
        ol.writeX( " ASSUME(0, g2==g3);");
        
        g1 = genus(EI);
        g2 = genus(EI,"nor");
        g3 = genus(EI,"pri");
        ASSUME(0, g1==g2);
        ASSUME(0, g2==g3);        
    }
    if (defined(BAS)) {  setring BAS; }
    return(1);
}


 
