/////////////////////
version="version test.resolve.resolve.lib";
category="Commutative Algebra";
info="
";

LIB("ringutils.lib");
LIB("wrappers.lib");
LIB("resolve.lib");

proc testResolve(getRng, gens, trialsPerRing, ol)
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);  
    if (defined(basering) ) {   def BAS=basering; }

    def rng = getRng( );
    setring rng;   

    short = 0;
    int trial;
    while(1)
    {   
        option(nowarn);  
        kill rng;      

        ol.writeX( " // getRng() ;");

        def rng = getRng( );
        setring rng;
        if (warnIsSet)      {        option(warn);      }
      
        ol.clearX();
        ol.writeX( "");
        ol.writeX( "");
        
        ol.writeX( "LIB \"wrappers.lib\";");
        ol.writeX( "LIB \"src/randomRing.lib\" ;");
        ol.writeX( "LIB \"src/tests/test.resolve.resolve.lib\" ;"); 
        ol.writeX(  ringToStringHack (basering) );
        ol.writeX( "int trial = " + string( trial) + ";" );
       
        if ( defined(J) ) { kill J; }
        ideal J = gens.idealG( );
        if ( defined(I) ) { kill I; }
        ideal I = gens.idealG( );
        
          ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
       ol.writeX( "ideal I = " + string( I ) + ";" );
       ol.writeX( "  ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );
       
       ol.writeX( "ideal J = " + string( J ) + ";" );
       ol.writeX( "  ol.writeX( \"ideal J = \" + string( J ) + \";\" );" );
       
        
        I = I+J;
        ol.writeX( "   I = I+J;");
        if ((dimIdeal(i)>=0) && not (isZero(i)) )
        {   
            ol.writeX( " resolve(I);");
            resolve(I);
        }
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}

/*

proc testResolverapper()
{
	printlevel = 0 ;
    TRACE=1;
	// seems doable
	int numVars = 2;
	int maxGens = 5;
	int maxTermsPerGen = 3;
	int maxMonomialDegree = 3;
	int absMaxCoeff = 15 ;
	int trials = 1000;
	testResolve( numVars, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials);
}

testResolverapper();

*/
