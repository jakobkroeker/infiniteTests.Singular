/////////////////////
version="version test.heightZ";
category="Commutative Algebra";
info="
";


LIB "primdecint.lib";
LIB "randomIdeal.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";

proc testHeightZ( getRng, idealG, trialsPerRing, ol )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    def rng = getRng( );
    setring rng;
    
    if (defined(basering) ) {   def BAS=basering; }
    setring rng;

    int trial;
    ideal cs,  I, J;

    while( 1 )
    {   
       option(nowarn);  
       kill rng;      

       ol.writeX( " // getRng() ;");

       def rng = getRng( );
       setring rng;
       if (warnIsSet)      {        option(warn);      }
       ideal cs,  I, J;
       ol.writeX( "LIB \"wrappers.lib\";");
       ol.writeX( "LIB \"src/randomRing.lib\" ;");
       ol.writeX( "LIB \"src/tests/test.heightZ\" ;"); 
       ol.writeX(  ringToStringHack (basering) );
       ol.writeX( " // trial: ", trial );
       I = idealG( );
       ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
       ol.writeX( "ideal I = " + string( I ) + ";" );
       ol.writeX( "  ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );
       
       ol.writeX( "heightZ(I);");
       heightZ( I );

       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}

 

