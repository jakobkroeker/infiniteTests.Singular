/////////////////////
version="version test.intersect.vs.intersect.via.eliminate";
category="Commutative Algebra";
info="
";

LIB "primdecint.lib";
LIB "randomideal.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";

proc intersect_via_eliminate(ideal i, ideal j) 
"USAGE:   intersect_via_eliminate(i,j);
@*        i,j = ideals
ASSUME:   i,j = ideals over the integers or a field
RETURN:   ideal, the intersection of i and j
EXAMPLE:  example intersect_via_eliminate;  shows an example" 
{
  ASSUME( 0 , isCommutative( ) );

  ASSUME( 0 , hasGlobalOrdering( basering ) );  

  if ( baseringIsExtensionField()   ||  
         not (  baseringHasIntegerCoefficientRing()  ||
                baseringHasRationalCoefficientField() ||
                baseringHasPrimeCoefficientField()
           ) 
      )
  { 
      ERROR("intersect_via_eliminate does not support given ring type");
  }
  
  if ( isZero(i) || isZero(j) )
  {
      return (ideal(0));
  }
  
  i = stdWrapper(i);
  j = stdWrapper(j);
  
 

  int bIsQring =   isQuotientRing( basering );
  ideal q = ideal(basering);

  def BAS = basering;

  // add one new variable "t" to a copy of basering
  int numVariables = nvars(basering);  
  int pos_t = numVariables + 1; // position of new variable 't' is numVariables + 1

  // introduce new variable called "t" 
  // hardcoded, but does not hurt, since there are no parameters. and 'x' is not in conflict with 't'
  string tempstr = "ring pr2=(" + charstr(BAS) + "),(x(1.."+  string(numVariables) + "), t), dp;"; 
  //dbprint(1, "tempstr", tempstr);
  execute(tempstr);   
  
  if ( not bIsQring )
  {
     def r2 = pr2;
  }
  else 
  {
     ideal   q = std(imap(BAS,q));
     qring r2 = q;
  }

  /*
  list rl = ringlist(basering);

  rl[2] =  indexedVariables("x", numVariables) + list("t");;
  dbprint(printlevel-voice, "rl[2] = ", rl[2] );
  // change variable ordering to dp:
  rl =  changeRingListVarOrderTo_dp (rl);
  dbprint(printlevel-voice, "rl[2] = ", rl[2] );

  // difference to previous variant: if basering is a qring, then r2 is also a qring.
  def r2 = ring(rl);
  setring r2;
  // */
  //dbprint(printlevel-voice, "intersect_via_eliminate:: r2 = ", basering );
  //dbprint(printlevel-voice, "intersect_via_eliminate:: var(pos_t)= ", var(pos_t) );
  

  // for i=(f_1,...,f_s) and j=(g_1,...,g_t) compute the ideal
  // J=(tf_1,...,tf_s,(1-t)g_1,...,(1-t)g_t)
  // then we eliminate "t" from J and map the new J to our basering
  ideal J = 0;

  int k;
  ideal ii = fetch(BAS,i);
  ii = stdWrapper(ii); //not necessary due to Anne
  for(k=1; k <= nGens(ii); k++) 
  {
     J = J,var(pos_t)*ii[k];
  }
  ideal jj = fetch(BAS,j);
  jj = stdWrapper(jj); //not necessary due to Anne
  for(k=1; k <= nGens(jj); k++)
  {
     J = J,(1 - var(pos_t) )*jj[k];
  }

  ideal e = eliminate(J, var(pos_t) );
  setring BAS;

  ideal result1 = fetch(r2,e); 

  for(k=1; k <= nGens(result1); k++)
  {
     //ASSUME(0, (leadcoef(result1[k]) >0));
     if(leadcoef(result1[k]) < 0)
     {
        //ERROR("intersect_via_eliminate::Warning: negative leadcoef occured");
        result1[k] = -result1[k];
     }
  }
  return(result1);
}


proc testIntersect( getRng, idealG, trials, testflags, optionlist, logfile )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
      def rng = getRng( );
      setring rng;
      option(warn);

     link l=":w "+logfile;

      
    short = 0;
    int trial;

    ideal cs,  I, J, Q;
    ring qrng;
    
    
    while( trial<trials )
    {   
      option(nowarn);  
      kill rng;      
      def rng = getRng( );
      setring rng;
      ideal cs,  I, J, gI, gJ, ggI, ggJ, I_J, gI_gJ, e_I_J, e_gI_gJ, z_I_J;


      if (testflags.optionflagTest)
      {
        if ( hasGlobalOrLocalOrdering(basering))
        {
           chooseRandomOptionsFromList(optionlist);
        }
      }
      if (warnIsSet)
      {
        option(warn);
      }
      
        monitor ("") ;
       l=":w "+logfile;
       open(l);
       write(l,"");
       write(l,"");
       close(l);        
       monitor(logfile,"io");
       dbprint(1, "LIB \"wrappers.lib\";");
       dbprint(1, "LIB \"src/randomRing.lib\" ;");
       dbprint(1, "LIB(\"src/tests/test.intersect\");");
       
      
       dbprint( 1, "ring rng = "  + string( basering)+";" );
       dbprint( 1, "short = 0 ;" );
       
       if ( not ("0" == string(minpoly) ))
       {
         dbprint( 1, "minpoly = " + string(minpoly) + ";");
       }
       if (isQuotientRing(rng))
       {
         dbprint( 1, "ideal  QQQ = "  + string( ideal(basering))+";" );
         dbprint( 1, "qring QR = QQQ;" );
       }
       dbprint( 1, "intvec op = "+string( option(get) )+";");     
       dbprint( 1, " option(set, op) ;");
       dbprint( 1, " option() ;");
       dbprint( 1, " // option() ;" + option() );

       if (defined(qrng)) {kill qrng; }
       
       dbprint( 1, "// int trial= "+string( trial)+";" );
       I = idealG( );
       J = idealG( );
       dbprint( 1, "system(\"random\", " + string( system("random") ) + ");" );
       dbprint( 1, "ideal I = "+string( I)+";" );
       dbprint( 1, "ideal J = "+string( J)+";" );
       dbprint( 1, "ideal gI = std(I);" );
       dbprint( 1, "ideal gJ = std(J);" );       
       gI = std(I);
       gJ = std(J);

       dbprint( 1, "ideal I_J =  intersect(I,J);" );
       I_J =  intersect(I,J);
       dbprint( 1, "ASSUME(0, isSubModule(I_J, I));" );
       dbprint( 1, "ASSUME(0, isSubModule(I_J, J));" );
       ASSUME(0, isSubModule(I_J, I));
       ASSUME(0, isSubModule(I_J, J));


       dbprint( 1, "ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,I_J)   ) );" );
       dbprint( 1, "ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,  J)   ) );" );
       dbprint( 1, "ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,  gI)   ) );" );
       dbprint( 1, "ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,  I+gJ)   ) );" );
       ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,I_J)   ) );
       ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,J)   ) );
       ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,gI)   ) );
       ASSUME(0, idealsAreEqual(I_J     , intersect(I_J,I+gJ)   ) );


       if ((char(rng)==0) && (not (isQuotientRing(basering)) ))
       {
           dbprint( 1, "ideal z_I_J =  intersectZ(I,J);" );
           z_I_J = intersectZ(I,J);
           dbprint( 1, "  ASSUME(0, idealsAreEqual(I_J    , z_I_J    ) );");
           ASSUME(0, idealsAreEqual(I_J     , z_I_J    ) );
       }
       dbprint( 1, " ideal gI_gJ = intersect(gI,gJ);" );
       gI_gJ = intersect(gI,gJ);
       dbprint( 1, "  ASSUME(0, idealsAreEqual(I_J    , gI_gJ    ) );");
       ASSUME(0, idealsAreEqual(I_J     , gI_gJ    ) );

       if (hasGlobalOrdering(basering)  )
       {
           dbprint( 1, " ideal e_I_J =  intersect_via_eliminate(I,J);"  );
           e_I_J =  intersect_via_eliminate(I,J);
           dbprint( 1, " e_gI_gJ =  intersect_via_eliminate( gI, gJ);"  );
           e_gI_gJ =  intersect_via_eliminate( gI, gJ);
           dbprint( 1, "  ASSUME(0, idealsAreEqual(I_J    , e_I_J    ) );");     
           dbprint( 1, "  ASSUME(0, idealsAreEqual(gI_gJ  ,  e_gI_gJ ) );");

           ASSUME(0, idealsAreEqual(I_J     , e_I_J    ) );
           
           ASSUME(0, idealsAreEqual(gI_gJ   , e_gI_gJ  ) );
       }
       monitor("");
       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}


 
	


