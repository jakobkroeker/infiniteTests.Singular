//
version="version test.lipmanresolve";
category="algebraic geometry";
info="
";


//LIB "ringutils.lib" ;
//LIB "wrappers.lib" ;
//LIB "reslipman.lib" ;
//LIB "randomIdeal.lib" ;


proc testLipmanResolve( rng, idealG, trials, ol)
{
    print ("//testResolve");
    if (defined(basering) ) {   def BAS=basering; }


    setring rng;
    export(rng);

    int trial;
    ideal I,J;
    int dbg;
    list occuringVariableData;
    list L;
    for (trial = 1; trial<=trials; )
    {   
       setring rng;


       J = idealG();
       //ol.writeX( "J:", J, "" );
       I =  idealG();
       //ol.writeX( "I:", I, "" );
       
       I = I+J;
       I = Radical(I);
       I = std(I);
       //ol.writeX( "I:", I, "" );

      if (not isZero(I) && not idealsAreEqual(ideal(1), I) )
      {
           dbg = printlevel - voice + 2;
         //--- eliminate unnecessary variables from the ambient space 
           
           occuringVariableData = findvars(I,0);
           if ( size(occuringVariableData[1]) > 0 ) 
           {
               if ( defined(Rnew) )  { kill Rnew; }
               execute(" ring Rnew = ("+charstr(rng)+"), ("+string( occuringVariableData[1] )+"), dp; ");

               //ol.writeX( "rnew:", Rnew, "" );
               ideal I = imap(rng,I);   
             
               I = Radical(I);
               I = std(I);
               
               if (    dimIdeal(I)==2 && ( not isZero(I) ) && ( not idealsAreEqual(ideal(1), I) )    )
               {
                   ol.clearX();
                   ol.writeX( "");
                   ol.writeX( "");

                   ol.writeX( "LIB \"wrappers.lib\";");
                   ol.writeX( "LIB \"reslipman.lib\";");
                   ol.writeX( "ring rng = "  + string( basering)+";" );
                   ol.writeX( "short = 0 ;" );                   
                   ol.writeX( "intvec op = "+string( option(get) )+";");           
                   ol.writeX( " option(set, op) ;");
                   ol.writeX( " option() ;");
                   ol.writeX( " // option() ;" + option() );
                   ol.writeX( "int trial = " + string( trial) + ";" );
                   ol.writeX( "   ideal I = "+string(I)+";");
                   ol.writeX( "def L = lipmanresolve(I);" );
                   trial = trial+1;
                   L = lipmanresolve(I);
                   L; 
               }
           }
       }
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}



 











