/////////////////////
version="version test.finduni";
category="Commutative Algebra";
info="
";

LIB "randomIdeal.lib";


 

proc testFinduni( getRng, idealG, trials )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
    def rng = getRng( );
    setring rng;
    option(warn);
      
    int trial;    
    while(1)
    {   
       option(nowarn);  
        kill rng;      

        ol.writeX( " // getRng() ;");

        def rng = getRng( );
        setring rng;
        
       ol.writeX( "");
       ol.writeX( "");
      
       ol.writeX( "LIB \"wrappers.lib\";");
       ol.writeX( "LIB \"src/randomRing.lib\" ;");
       ol.writeX( "LIB \"src/tests/test.finduni\" ;"); 
       ol.writeX(  ringToStringHack (basering) );
      
       ideal I = idealG( );

       ol.writeX( "system(\"random\", " + string( system("random") ) +         ");" );
       ol.writeX( "ideal I = " + string( I ) + ";" );

       ol.writeX( "  ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );          


       ol.writeX( "   ideal IS = std(I);" );       
       ideal IS = std(I);      
       
       if (dim(IS) !=0 ) { continue;}
       
       ol.writeX( "   finduni(IS); ");
       finduni(IS);
       
       trial = trial + 1;
    }

    if (defined(BAS)) {  setring BAS; }
    return(1);
}



//	printlevel = 0 ;
//    TRACE = 0;

// testFactorWrapper("0", "dp");
// testFactorWrapper("3", "lp");
// testFactorWrapper("23","Dp");



