
echo = 0;
option("redSB");


LIB("ringutils.lib");
LIB("primdec.lib");
LIB("ehv.lib");
LIB("wrappers.lib");

 

proc testRadicalEHV( numVars, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials , pordstr)
{
    print ("testResolve");
    if (defined(basering) ) {   def BAS=basering; }

    def rng = createRing("0",pordstr, numVars) ;
    setring rng;
    export(rng);
    basering;~;
    list ideals;

    int trial;
    def rI, rIehv;
    for (trial = 1; trial<=trials; trial++)
    {   
       setring rng;
       //print ("trial: "+string(trial));
     
       if ( defined(i) ) { kill i; }
       ideal i = randomIdeal(  random(1, maxGens) , random(1, absMaxCoeff) , random(0, maxMonomialDegree), random(1, maxTermsPerGen)  );
       //print ("i:");
       if ( defined(rI) ) { kill rI; }
       def rI =radical(i);;  
       if ( defined(rIehv) ) { kill rIehv; }
       def rIehv = radEHV(i);;
       if (not  isRadical(rIehv )  ) 
       { 
            print("testRadicalEHV failed for i= "); i;
       }

       ASSUME(0, isRadical(rI));
      
       ASSUME(0, isRadical(rIehv));
       ASSUME(0, idealsAreEqual(rI,  rIehv));

    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}


proc testRadicalEHVWrapper()
{

	// seems doable
	int numVars = 3;
	int maxGens = 5;
	int maxTermsPerGen = 4;
	int maxMonomialDegree = 3;
	int absMaxCoeff = 15 ;
	int trials = 10000;
	testRadicalEHV( numVars, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials, "dp");
}

	printlevel = 0 ;
    TRACE = 0;

testRadicalEHVWrapper();

