/////////////////////
version="version test.char_series";
category="Commutative Algebra";
info="
";

LIB "primdec.lib";
LIB "ehv.lib";
LIB "randomideal.lib";
 

proc testCharSeries( getRng, idealG, trials, lo )
{
    int warnIsSet = optionIsSet("warn");
    if (defined(basering) ) {   def BAS=basering; }

    def rng = getRng( );
    setring rng;
    option(warn);
      
    short = 0;

    bigint trial;
    lo.clearX();

    while( trial<trials )
    {  

       option(nowarn);  
       kill rng;      
       def rng = getRng( );
       setring rng;
       def cs,  I;

      if (warnIsSet)
      {
        option(warn);
      }
       lo.clearX();
       lo.writeX("");
       lo.writeX("LIB(\"primdec.lib\");");
       lo.writeX("LIB(\"randomideal.lib\");");
       lo.writeX("ring rng = "+string(basering)+";");
       lo.writeX("bigint trial = "+string(trial)+";");
       I = idealG( );
       lo.writeX("ideal I = "+string( I )+";");
       //lo.writeX( "printIdealInfo( I ) ;");
       lo.writeX( idealInfoString(I) ) ;
       lo.writeX("def cs = char_series(I);");
       lo.writeX("");
       lo.writeX("");
       //lo.write("quit;");
       cs = char_series(I);
       trial = trial+1;
       //ASSUME(0, 0);
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}


