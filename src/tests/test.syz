/////////////////////
version="version test.syz";
category="Commutative Algebra";
info="
";

LIB "primdecint.lib";
LIB "randomideal.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";

/// syz test. Supports quotient rings.
///
/// trials: currently number of total trials. should be number of trials in the same ring
///         also some bugs appear when repeating the same test twice
proc testSyz( getRng, idealG, trials, optionlist, testflags, ol )
{
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
    
    def rng = getRng( );
    setring rng;
    option(warn);
    int trial = 1;
    while( trial<trials )
    {   

       option(nowarn);  
       kill rng;      
       def rng = getRng( );
       setring rng;
      
       ideal I, J, gI, gJ, ggI, ggJ; 
       def syzI, syzgI;

       if (testflags.optionflagTest)
       {
         if ( hasGlobalOrLocalOrdering(basering))
         {
            chooseRandomOptionsFromList(optionlist);
         }
       }
       if (warnIsSet)
       {
         option(warn);
       }
      
    
       ol.clearX();
       ol.writeX( "");
       ol.writeX( "LIB \"primdec.lib\";");
       ol.writeX( "LIB \"wrappers.lib\";");
       ol.writeX( "LIB \"src/tests/test.syz\";");
       ol.writeX( "ring rng = "  + string( basering)+";" );
      
       if ( not ("0" == string(minpoly) ))
       {
         ol.writeX( "minpoly = " + string(minpoly) + ";");
       }

       if (isQuotientRing(rng))
       {
         ol.writeX( "ideal  QQQ = "  + string( ideal(basering))+";" );
         ol.writeX( "qring QR = QQQ;" );
       }

       ol.writeX( "intvec op = "+string( option(get) )+";");     
       ol.writeX( " option(set, op) ;");
       ol.writeX( " option() ;");
       ol.writeX( " // option() ;" + option() );

       
       ol.writeX( "int trial = " + string( trial) + ";" );
       short = 0;
       I = idealG( );
       ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
       ol.writeX( "ideal I = " + string( I ) + ";" );
       
       ol.writeX( "def syzI = syz (I);");
       syzI = syz (I);
       ol.writeX( "ASSUME(0, idealsEqual(ideal(0),	 transpose(matrix(syzI))*transpose(matrix(I)) ) );");
       ASSUME(0, idealsEqual(ideal(0) , transpose(matrix(syzI))*transpose(matrix(I)) ) );
       
       ol.writeX( "ideal gI =  std(I);" );
       gI =  std(I);
       //ol.writeX( "//        gI = "+string(gI) );
   

       ol.writeX( "ASSUME(0, 0== size( std(reduce (I,gI ) ))  );");
       ASSUME( 0, 0== size( std(reduce (I,gI ) ))  );

       ol.writeX( "def syzgI = syz (gI);");
       syzgI = syz (gI);


       ol.writeX( "ASSUME(0, idealsEqual(ideal(0), transpose(matrix(syzgI))*transpose(matrix(gI)) ) );");
       ASSUME(0, idealsEqual(ideal(0), transpose(matrix(syzgI))*transpose(matrix(gI)) ) );


       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}

 



