/////////////////////
version="version test.algemodstd";
category="Commutative Algebra";
info="
";


LIB "randomIdeal.lib";
LIB "algemodstd.lib";
 

proc testAlgemodStd( rng, idealG, trials, ol )
{
 
    if (defined(basering) ) {   def BAS=basering; }
    setring rng;

    bigint trial;
    ideal I,result,result2,resultStd;

    while( trial<trials )
    {  
       ol.clearX();
       ol.writeX("LIB(\"algemodstd.lib\");");
 
       ol.writeX("ring rng = "+string(basering)+";");
       ol.writeX("bigint trial = "+string(trial)+";");
 
       I = idealG( );
 
       ol.writeX("ideal I= "+string(I)+";");
 
       ol.writeX("ideal result =algemodStd(I);");
       result =algemodStd(I);
     
       ol.writeX("       ASSUME(0, idealsAreEqual(result,I) );");
       ASSUME(0, idealsAreEqual(result,I) );
     
       ol.writeX("ideal result2 =algemodStd(I);");
       result2 =algemodStd(I);
       
       ol.writeX(" ASSUME(0, size(result2)==size(result) );");
       ASSUME(0, size(result2)==size(result) );
        
       ol.writeX("ideal resultStd =groebner(I);");
       resultStd =groebner(I);
     
       ol.writeX("       ASSUME(0, idealsAreEqual(result,I) );");
       ASSUME(0, idealsAreEqual(result,resultStd) );
     
       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}
	

