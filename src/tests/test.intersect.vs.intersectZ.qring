/////////////////////
version="version test.intersect.vs.intersectZ.qring";
category="Commutative Algebra";
info="
";

LIB "primdecint.lib";
LIB "randomIdeal.lib";
LIB "ringutils.lib";
LIB "wrappers.lib";

proc intersect_via_eliminate(ideal i, ideal j) 
"USAGE:   intersect_via_eliminate(i,j);
@*        i,j = ideals
ASSUME:   i,j = ideals over the integers or a field
RETURN:   ideal, the intersection of i and j
EXAMPLE:  example intersect_via_eliminate;  shows an example" 
{
  ASSUME( 0 , isCommutative( ) );

  ASSUME( 0 , hasGlobalOrdering( basering ) );  

  if ( baseringIsExtensionField()   ||  
         not (  baseringHasIntegerCoefficientRing()  ||
                baseringHasRationalCoefficientField() ||
                baseringHasPrimeCoefficientField()
           ) 
      )
  { 
      ERROR("intersect_via_eliminate does not support given ring type");
  }
  
  if ( isZero(i) || isZero(j) )
  {
      return (ideal(0));
  }
  
  i = stdWrapper(i);
  j = stdWrapper(j);
  
 

  int bIsQring =   isQuotientRing( basering );
  ideal q = ideal(basering);

  def BAS = basering;

  // add one new variable "t" to a copy of basering
  int numVariables = nvars(basering);  
  int pos_t = numVariables + 1; // position of new variable 't' is numVariables + 1

  // introduce new variable called "t" 
  // hardcoded, but does not hurt, since there are no parameters. and 'x' is not in conflict with 't'
  string tempstr = "ring pr2=" + charstr(BAS) + ",(x(1.."+  string(numVariables) + "), t), dp;"; 
  execute(tempstr);   
  
  if ( not bIsQring )
  {
     def r2 = pr2;
  }
  else 
  {
     ideal   q = imap(BAS,q);
     qring r2 = q;
  }

  /*
  list rl = ringlist(basering);

  rl[2] =  indexedVariables("x", numVariables) + list("t");;
  dbprint(printlevel-voice, "rl[2] = ", rl[2] );
  // change variable ordering to dp:
  rl =  changeRingListVarOrderTo_dp (rl);
  dbprint(printlevel-voice, "rl[2] = ", rl[2] );

  // difference to previous variant: if basering is a qring, then r2 is also a qring.
  def r2 = ring(rl);
  setring r2;
  // */
  //dbprint(printlevel-voice, "intersect_via_eliminate:: r2 = ", basering );
  //dbprint(printlevel-voice, "intersect_via_eliminate:: var(pos_t)= ", var(pos_t) );
  

  // for i=(f_1,...,f_s) and j=(g_1,...,g_t) compute the ideal
  // J=(tf_1,...,tf_s,(1-t)g_1,...,(1-t)g_t)
  // then we eliminate "t" from J and map the new J to our basering
  ideal J = 0;

  int k;
  ideal ii = fetch(BAS,i);
  ii = stdWrapper(ii); //not necessary due to Anne
  for(k=1; k <= nGens(ii); k++) 
  {
     J = J,var(pos_t)*ii[k];
  }
  ideal jj = fetch(BAS,j);
  jj = stdWrapper(jj); //not necessary due to Anne
  for(k=1; k <= nGens(jj); k++)
  {
     J = J,(1 - var(pos_t) )*jj[k];
  }

  ideal e = eliminate(J, var(pos_t) );
  setring BAS;

  ideal result1 = fetch(r2,e); 

  for(k=1; k <= nGens(result1); k++)
  {
     if(leadcoef(result1[k]) < 0)
     {
        ERROR("intersect_via_eliminate::Warning: negative leadcoef occured");
        result1[k] = -result1[k];
     }
  }
  return(result1);
}


proc testIntersectVSintersectZ( rng, idealG, trials )
{
    if (defined(basering) ) {   def BAS=basering; }
    setring rng;

    int trial;
    ideal cs,  I, J, Q;
    ring qrng;
    while( trial<trials )
    {   
       
       setring rng;
       if (defined(qrng)) {kill qrng; }
       dbprint( 1, "basering: ", basering );
       dbprint( 1, "trial: ", trial );
       Q = std(idealG( )); 
       qring qrng = Q;
       ideal  I, J;
       I = idealG( );
       J = idealG( );
       dbprint( 1, "I = ", I );
       dbprint( 1, "J = ", J );
       dbprint( 1, " intersect(I,J) = ",  intersect(I,J) );
       dbprint( 1, " intersect(std(I),std(J)) = ",  intersect(std(I),std(J) ) );
       dbprint( 1, " intersect_via_eliminate(I,J) = ",  intersect_via_eliminate(I,J) );
       dbprint( 1, " intersect_via_eliminate(std(I),std(J)) = ",  intersect_via_eliminate(std(I),std(J)) );
       dbprint( 1, "I = ", I );
       dbprint( 1, "J = ", J );
       ASSUME(0, idealsAreEqual( intersect(std(I),std(J)), intersect_via_eliminate(std(I),std(J)) ) );
       trial = trial+1;
    }

    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}


proc  testIntersectWrapper( cchar, ordering, numVars, genParams, trials )
{
    def rng = createRing( cchar,ordering, numVars ) ;

    def idealG = idealGeneratorFromParams( genParams  );

	testIntersectVSintersectZ( rng, idealG, trials);
}

	

