//
version="version test.primdecGTZ.only.primdec";
category="Commutative Algebra";
info="
";

LIB "wrappers.lib";
LIB "ringutils.lib";
LIB "primdec.lib";
LIB "ehv.lib";


proc adjustAssumeLevel()
{
    if (not (defined(assumeLevel) ) ) 
    {
       ol.writeX( "       def Top::assumeLevel = 3;");
       ol.writeX( " export (Top::assumeLevel);");
       def Top::assumeLevel = 3;
       export (Top::assumeLevel);
    }
    else
    {
       if (assumeLevel==0)
       { 
            assumeLevel = 3;
       }
       ol.writeX( "  assumeLevel = "+string(assumeLevel)+";");
    }
}

//proc wDecompE (I)         {    return ( Primdec::decompE(I) );     }
proc wDecomp (I)          {    return ( Primdec::convList(Primdec::decomp(I) ) );     }


proc primdecGTZEkeepKomp (I)         {    return ( primdecGTZE(I,"keep_comp") );     }
proc primdecGTZkeepKomp (I)          {    return ( primdecGTZ (I,"keep_comp") );     }

proc minAssGTZEFacSTD (I)            {    return ( minAssGTZE(I,"facstd") );         }
proc minAssGTZFacSTD  (I)            {    return ( minAssGTZ (I,"facstd") );         }

proc minAssGTZEnoFacSTD (I)          {    return ( minAssGTZE(I,"noFacstd") );       }
proc minAssGTZnoFacSTD  (I)          {    return ( minAssGTZ (I,"noFacstd") );       }

proc minAssGTZEorigNoFacSTD (I)      {    return ( minAssGTZE(I,"GTZ","noFacstd") ); }
proc minAssGTZorigNoFacSTD (I)       {    return ( minAssGTZ (I,"GTZ","noFacstd") ); }

proc minAssGTZEGTZ (I)               {    return ( minAssGTZE(I,"GTZ") );            }
proc minAssGTZGTZ  (I)               {    return ( minAssGTZ (I,"GTZ") );            }

proc primdecSYENoOptimalOrdering (I) {    return ( primdecSYE(I,0) );                }
proc primdecSYNoOptimalOrdering  (I) {    return ( primdecSY (I,0) );                }

proc minAssCharENoOptimalOrdering(I) {    return ( minAssCharE(I,0) );               }
proc minAssCharNoOptimalOrdering (I) {    return ( minAssChar (I,0) );               }

proc primdecEUsingMinAssChar  (I)    {    return ( Primdec::prim_dec_i(1,I,0) );        }
proc primdecUsingMinAssChar   (I)    
{
      if (defined(Primdec::prim_dec_i)) { return ( Primdec::prim_dec_i(0,I,0) );      }
      else { return ( Primdec::prim_dec(I,0) );      }
}


proc minAssGTZorig      (I)          {    return ( minAssGTZ(I,"GTZ") );              }


proc minAssPrimesNew  (I)           {    return ( Primdec::minAssPrimesE(I) );        }
proc minAssPrimesOrig (I)           {    return ( Primdec::minAssPrimes(I) );         }


proc minAssPrimesOldNew  (I)        {    return ( Primdec::minAssPrimesoldE(I) );    }
proc minAssPrimesOldOrig (I)        {    return ( Primdec::minAssPrimesold (I) );    }

proc minAssNew  (I)                 {    return ( Primdec::minAssE(I) );             }
proc minAssOrig (I)                 {    return ( Primdec::minAss (I) );             }


proc minAssPrimCharsetsECurrentOrd(I)    {    return ( Primdec::min_ass_prim_charsets_i(1,I,0)) ; }
proc minAssPrimCharsetsCurrentOrd (I)    {    return ( Primdec::min_ass_prim_charsets_i(0,I,0)) ; }

proc minAssPrimCharsetsEOptimalOrd (I)    {    return ( Primdec::min_ass_prim_charsets_i(1,I,1)) ; }
proc minAssPrimCharsetsOptimalOrd  (I)    {    return ( Primdec::min_ass_prim_charsets_i(0,I,1)) ; }


proc minAssPrimCharsets0New  (I)    {    return ( Primdec::min_ass_prim_charsets0_i(1,I,0)) ; }
proc minAssPrimCharsets0Orig (I)    {    return ( Primdec::min_ass_prim_charsets0_i(0,I,0)) ; }

proc minAssPrimCharsets1New   (I)   {    return ( Primdec::min_ass_prim_charsets1_i(1,I,1)) ; }
proc minAssPrimCharsets1Orig  (I)   {    return ( Primdec::min_ass_prim_charsets1_i(0,I,1)) ; }



// this is a filter. Implement is as a constraint filter for a test (only test if random ideal matches filter)
proc testPrimdecZeroDim( numVars, maxGens, absMaxCoeff, maxMonomialDegree, maxTermsPerGen, trials )
{
    print ("testPrimdecZeroDim");
    if (defined(basering) ) {   def BAS=basering; }

    def rng = createRing("0","dp", numVars) ;
    setring rng;
    export(rng);


    int trial;

    // generating only zerodimensional ideals:
    for (trial = 1; trial<=trials; trial=trial)
    {   
       setring rng;
       print ("trial: "+string(trial));
       if ( defined(j) ) { kill j; }
       basering;
       system("random");
       ideal j = randomIdeal(  random(1, maxGens) , random(1, absMaxCoeff) , random(0, maxMonomialDegree), random(1, maxTermsPerGen)  );
     
       if ( dimIdeal(j)==0 )
       {
          print(" dimIdeal(j)=0" );
          trial=trial+1;
          zerodec(j); 
       }
    }

    if (defined(BAS)) {  setring BAS; }
    return(1);
}




proc testPrimdec( getRng, genTable, trials, procName, ol )
{
    print ("//testPrimdec");
    adjustAssumeLevel();
    if (defined(basering) ) {   def BAS=basering; }

    intvec op ;

    option(nowarn);
    def rng = getRng();
    setring rng;
    option(warn);
    export(rng);

    list ideals;

    int trial,i;
 
    ideal I;
    string emptystring="";
    // while (trial<trials)
    while(1)
    {   
      kill rng;

      option(nowarn);

      def rng = getRng();
      setring rng;
      option(warn);
      ideal I;
      if (defined(minAss1)) {kill minAss1;}
      if (defined(minAss1e)) {kill minAss1e;}

      export(rng);
       //ol.writeX( "// get random ideal ");
      trial = 0;
      //while (trial<trials)
      //{

           I = genTable.idealG(  );    
           //ol.writeX( "// got random ideal ");

           if (not isZero(I) && not idealsAreEqual( ideal(1), I ) )
           {
               ol.clearX();
               ol.writeX("");
               ol.writeX("");
               ol.writeX( "////////////////////////////////////////////////////////////////////////////////////////");
               ol.writeX( "if (not defined(assumeLevel)) { def Top::assumeLevel ; } assumeLevel = "+string( assumeLevel ) + ";  " );
               ol.writeX( "//  voice = "+string( voice ) + ";" );
               ol.writeX( "system(\"random\","+string( system("random") ) + ");" );
               ol.writeX( "//random: "+ string( system("random") )  );
               ol.writeX( "LIB(\"src/tests/test.primdec.mp.timeout\");");
               ol.writeX( "intvec op = "+string( option(get) )+";");
               ol.writeX( "ring rng = "+string(basering)+";");
               ol.writeX( "minpoly = "+string(minpoly)+";");
               ol.writeX( "ideal I = "+string(I)+";");
               ol.writeX( "printIdealInfo( I ) ;");
               printIdealInfo(I);
               ol.writeX( "bigint trial = "+string(trial)+";");

               ol.writeX( "def result= "+procName+"(I);");              
               execute("def result="+procName+"(I);");    
 
               trial++;
           }
        //}
          
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}



