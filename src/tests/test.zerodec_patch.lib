

option("redSB");

echo = 0;
LIB("primdec.lib");
LIB("ehv.lib");
LIB("randomIdeal.lib");


proc zerodec_orig(ideal I)
"USAGE:   zerodec(I); I ideal
ASSUME:  I is zero-dimensional, the characteristic of the ground field is 0
RETURN:  list of primary ideals, the zero-dimensional decomposition of I
NOTE:    The algorithm (of Monico), works well only for a small total number
         of solutions (@code{vdim(std(I))} should be < 100) and without
         parameters. In practice, it works also in large characteristic p>0
         but may fail for small p.
@*       If printlevel > 0 (default = 0) additional information is displayed.
EXAMPLE: example zerodec; shows an example
"
{
  if(attrib(basering,"global")!=1)
  {
    ERROR(
    "// Not implemented for this ordering, please change to global ordering."
    );
  }
  def R=basering;
  poly q;
  int j,time;
  matrix m;
  list re;
  poly va=var(1);
  ideal J=groebner(I);
  ideal ba=kbase(J);
  int d=vdim(J);
  dbprint(printlevel-voice+2,"// multiplicity of ideal : "+ string(d));
//------ compute matrix of multiplication on R/I with generic element p -----
  int e=nvars(basering);
  poly p=randomLast(100)[e]+random(-50,50);     //the generic element
  matrix n[d][d];
  time = timer;
  for(j=2;j<=e;j++)
  {
    va=va*var(j);
  }
  for(j=1;j<=d;j++)
  {
    q=reduce(p*ba[j],J);
    m=coeffs(q,ba,va);
    n[j,1..d]=m[1..d,1];
  }
  dbprint(printlevel-voice+2,
    "// time for computing multiplication matrix (with generic element) : "+
    string(timer-time));
//---------------- compute characteristic polynomial of matrix --------------
  execute("ring P1=("+charstr(R)+"),T,dp;");
  matrix n=imap(R,n);
  time = timer;
  poly charpol=det(n-T*freemodule(d));
  dbprint(printlevel-voice+2,"// time for computing char poly: "+
         string(timer-time));
//------------------- factorize characteristic polynomial -------------------
//check first if constant term of charpoly is != 0 (which is true for
//sufficiently generic element)
  if(charpol[size(charpol)]!=0)
  {
    time = timer;
    list fac=factor(charpol);
    testFactor(fac,charpol);
    dbprint(printlevel-voice+2,"// time for factorizing char poly: "+
            string(timer-time));
    int f=size(fac[1]);
//--------------------------- the irreducible case --------------------------
    if(f==1)
    {
      setring R;
      re=I;
      return(re);
    }
//---------------------------- the reducible case ---------------------------
//if f_i are the irreducible factors of charpoly, mult=ri, then <I,g_i^ri>
//are the primary components where g_i = f_i(p). However, substituting p in
//f_i may result in a huge object although the final result may be small.
//Hence it is better to simultaneously reduce with I. For this we need a new
//ring.
    execute("ring P=("+charstr(R)+"),(T,"+varstr(R)+"),(dp(1),dp);");
    list rfac=imap(P1,fac);
    intvec ov=option(get);;
    option(redSB);
    list re1;
    ideal new = T-imap(R,p),imap(R,J);
    attrib(new, "isSB",1);    //we know that new is a standard basis
    for(j=1;j<=f;j++)
    {
      re1[j]=reduce(rfac[1][j]^rfac[2][j],new);
    }
    setring R;
    re = imap(P,re1);
    for(j=1;j<=f;j++)
    {
      J=I,re[j];
      re[j]=interred(J);
    }
    option(set,ov);
    return(re);
  }
  else
//------------------- choice of generic element failed -------------------
  {
    dbprint(printlevel-voice+2,"// try new generic element!");
    setring R;
    return(zerodec(I));
  }
}
 

 proc zeroRad_new(ideal I,list #)
"USAGE:  zeroRad(I) , I a zero-dimensional ideal
 RETURN: the radical of I
 NOTE:  Algorithm of Kemper
 EXAMPLE: example zeroRad; shows an example"
{
   if(homog(I)==1){return(maxideal(1));}
   //I needs to be a reduced standard basis
   def R=basering;
   int m=npars(R);
   int n=nvars(R);
   int p=char(R);
   int d=vdim(I);
   int i,k;
   list l;
   if(((p==0)||(p>d))&&(d==deg(I[1])))
   {
     intvec e=leadexp(I[1]);
     for(i=1;i<=nvars(basering);i++)
     {
       if(e[i]!=0) break;
     }
     I[1]=sep(I[1],i)[1];
     return(interred(I));
   }
   intvec op=option(get);

   option(redSB);
   ideal F=finduni(I);//F[i] generates I intersected with K[var(i)]

   option(set,op);
   if(size(#)>0){I=#[1];}

   for(i=1;i<=n;i++)
   {
      l[i]=sep(F[i],i);
      F[i]=l[i][1];
      if(l[i][2]>k){k=l[i][2];}  //computation of the maximal k
   }

   if((k==0)||(m==0)) //the separable case
   {
    intvec save=option(get);option(redSB);
    I=interred(I+F);option(set,save);return(I);
   }
   //I=simplify(I,1);// considered harmful.

   for(i=1;i<=n;i++)             //consider all polynomials over
   {                             //Fp(t(1)^(p^-k),...,t(m)^(p^-k))
      F[i]=powerCoeffs(F[i],k-l[i][2]);
   }

   string cR="ring @R="+string(p)+",("+parstr(R)+","+varstr(R)+"),dp;";
   execute(cR);
   ideal F=imap(R,F);
   ideal I=imap(R,I);
   dbprint(printlevel-voice, "in @R, I=",I);
   dbprint(printlevel-voice, "in @R, F=",F);


   // 1. renaming: parstr->ppar, varstr->vvar   
   //string nR1="ring @S1="+string(p)+",( ppar(1.."+string(m)+"),vvar(1.."+string(n)+") ),dp;";
   //execute(nR1);
    
   //ideal I = fetch(@R,I);
   //dbprint(printlevel-voice, "in @S1, I=",I);

   // 2. introducing nev variables y(1..npars(R)). Due to renaming we control all variable names and there can be no conflicts.
   string nR="ring @S="+string(p)+",(y(1.."+string(m)+"),vvar(1.."+string(n)+"),ppar(1.."+string(m)+") ),dp;";
   execute(nR);

   ideal G=fetch(@R,F);    //G[i](t(1)^(p^-k),...,t(m)^(p^-k),x(i))=sep(F[i])
   //ideal I= imap(@S1,I);

   ideal  map@R@SIdeal ;
   int mpos;
   for (mpos  =    1; mpos <= m;    mpos++)   {    map@R@SIdeal[mpos]=var(m+n+mpos);  } // map parstr y to ppar
   for (mpos = m  +1; mpos <= m+n;  mpos++)   {    map@R@SIdeal[mpos]=var(mpos);    } // map varstr to vvar

   map map@R@S= @R,map@R@SIdeal;
   ideal I= map@R@S(I);

   dbprint(printlevel-voice, "in @S, I=",I);
   dbprint(printlevel-voice, "in @S, G=",G);

   ideal J=I+G;
   poly el=1;
   k=p^k;
   for(i=1;i<=m;i++)
   {
      J=J,var(i)^k-var(m+n+i);
      el=el*var(i);
   }

   J=eliminate(J,el);
   dbprint(printlevel-voice, "in @S, J=",J);

   //setring @S1;
   //ideal J=imap(@S,J);
   //dbprint(printlevel-voice, "in @S1, J=",J);
   //setring @R;
   //ideal J=fetch(@S1,J);
   //dbprint(printlevel-voice, "in @R, J=",J);
   setring R;
   ideal  mapIdeal ;
 
   for (mpos  =    1; mpos <= m;    mpos++)   {    mapIdeal[mpos]=0;              } // map y to 0
   for (mpos = m  +1; mpos <= m+n;  mpos++)   {    mapIdeal[mpos]=var(mpos-m);    } // map vvar to vars
   for (mpos = m+n+1; mpos <= m+n+m;mpos++)   {    mapIdeal[mpos]=par(mpos-m-n);  } // map ppar to pars

   map backmap= @S,mapIdeal;
   ideal J=backmap(J);
   //ideal J=imap(@R,J);

   dbprint(printlevel-voice, "in R, J=",J);
   return(J);
}


proc testZeroRad_patch(  pRng ,idealGen, trials )
{
    print ("testPatchedSplitCharp");
    if (defined(basering) ) {   def BAS=basering; }

    def zeroRadStr=string(Primdec::zeroRad);
    kill Primdec::zeroRad;
    
    setring pRng;

    int trial;
    list L1,L2;
    ideal I;
    for (trial = 1; trial<=trials; trial++)
    {   
       setring pRng;
       print ("trial: "+string(trial));
      
       I = idealGen();
       print ("I:");
       I;
       if (not idealsEqual(I,ideal(0)) && not idealsEqual(ideal(1),I ) )
       {
            if ( defined(zeroRad) ) { kill zeroRad; }
            proc zeroRad(list l) 
            {
               return (zeroRad_orig(l));
            } 
            export(zeroRad);
            L1 = primdecGTZ(I);
            if (defined(zeroRad)) { kill zeroRad; }
              proc zeroRad(list l) 
            {
               return (zeroRad_new(l));
            } 
            export(zeroRad);
            L2 = primdecGTZ(I);
            ASSUME(0, primDecsAreEquivalent(L1, L2) );

            testPrimary( L1, I );
       }
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}


proc testZeroRad_patchWrapper(cchar,cord)
{
      init_randomIdeal();
      string cmd = "ring rng ="+cchar+" ,(x,y,z),"+cord+";";
      execute(cmd);
          
      def genParams = defaultIdealGeneratorParams();
      // adjust random ideal generator params:
      genParams.maxGens=4; 
      genParams.absMaxCoeff = 15;
      genParams.maxMonomialDegree = 3;
      genParams.maxTermsPerGen = 4;
      genParams.maxGens = 4;

      def idealG = idealGeneratorFromParams( genParams  );

      int trials = 3000;
       testZeroRad_patch( rng, idealG, trials);
}

testZeroRad_patchWrapper("0","dp");

testZeroRad_patchWrapper("7","dp");
testZeroRad_patchWrapper("7","lp"); 
testZeroRad_patchWrapper("7","Dp");
testZeroRad_patchWrapper("5","dp");
testZeroRad_patchWrapper("5","lp");
testZeroRad_patchWrapper("5","Dp");

testZeroRad_patchWrapper("19","dp");
testZeroRad_patchWrapper("19","lp");
testZeroRad_patchWrapper("19","Dp");



