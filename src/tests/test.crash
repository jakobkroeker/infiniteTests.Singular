/////////////////////
version="version test.slocus.lib";
category="Commutative Algebra";
info="
";


LIB "ringutils.lib";
LIB "wrappers.lib";
LIB "sing.lib";

proc slocusCrashTest( getRng , inputG, trialsPerRing, ol  )
{
    ol.writeX( " // testSlocus");
         
    int warnIsSet = optionIsSet("warn");
    option(nowarn);
    if (defined(basering) ) {   def BAS=basering; }
    def rng = getRng( );
    setring rng;
    option(warn);
      
    short = 0;

    int trial;
    
    while(1)
    {   
        option(nowarn);  
        kill rng;      

        ol.writeX( " // getRng() ;");

        def rng = getRng( );
        setring rng;
        
        if (warnIsSet)      {        option(warn);      }
        
        ol.writeX( "LIB \"wrappers.lib\";");
        ol.writeX( "LIB \"src/randomRing.lib\" ;");
        ol.writeX( "LIB \"src/tests/test.slocus.lib\" ;"); 
        ol.writeX(  ringToStringHack (basering) );
        ol.writeX( "int trial = " + string( trial) + ";" );
        
        if ( defined(J) ) { kill J; }
        ideal J = inputG();
        
        if ( defined(I) ) { kill I; }
        ideal  I = inputG();
        
        
        I = I+J; // why this???
        I = groebner(I);
        ol.writeX( "system(\"random\", " + string( system("random") ) + ");" );
        ol.writeX( "ideal I = " + string( I ) + ";" );
        ol.writeX( "  ol.writeX( \"ideal I = \" + string( I ) + \";\" );" );
        ol.writeX( "      slocus(I);");
        slocus(I);
    }


    if (defined(BAS)) {  setring BAS; }
    return(1);
}



