/////////////////////
version="version test.factorize";
category="Commutative Algebra";
info="
";


//LIB "ringutils.lib" ;

LIB "primdec.lib";
LIB "ehv.lib";
//LIB "wrappers.lib" ;
LIB "randomIdeal.lib";
LIB "reslipman.lib";



proc reconstructPoly( list l )
{
  int i ;
  poly result=1;

  for(i=1;i<=size(l[1]);i++)
  {
     result = result*(l[1][i])^(l[2][i]);
  }
  return(result);
}

 

proc testIsPrime( rng, idealG, trials )
{
    print ("testIsPrime");
    if (defined(basering) ) {   def BAS=basering; }

    setring rng;
    export(rng);

    int trial;
    list L ;
    ideal Q;
    while(1)
    {   
       dbprint(1, "trial: ", trial );
       setring rng;
       basering;

       Q= std(idealG( ));
       qring r = Q;

       ideal I= idealG( );

       I;
       isPrime(I);
       trial = trial + 1;
       setring rng;
       kill r;
    }

    if (defined(BAS)) {  setring BAS; }
    return(1);
}



//	printlevel = 0 ;
//    TRACE = 0;

// testIsPrimeWrapper("0", "dp");
// testIsPrimeWrapper("3", "lp");
// testIsPrimeWrapper("23","Dp");



