LIB("testutils.some.lib");
LIB("randomIdeal.lib");

proc testCharSeries( rng, idealG, trials )
{
    if (defined(basering) ) {   def BAS=basering; }
    setring rng;

    int trial;
    ideal cs,  I;

    while( trial<trials )
    {   
       dbprint( 1, "basering: ", basering );
       dbprint( 1, "trial: ", trial );
       I = idealG( );
       dbprint( 1, "I = ", I );
       cs = char_series(I);
       trial = trial+1;
    }
    if ( defined(BAS) ) {  setring BAS; }
    return(1);
}


option("warn");

//////////////////////////////////////////////////////////////////////////////// 
//////// adjust verbosity
printlevel = 0 ;
TRACE = 0;
echo  = 0;

//////// adjust random ideal generator params: 
init_randomIdeal();
TIdealGeneratingParameters genParams = defaultIdealGeneratorParams();

genParams.absMaxCoeff       = 14;
genParams.maxMonomialDegree = 5;
genParams.maxTermsPerGen    = 3;
genParams.maxGens           = 3;

proc idealG = idealGeneratorFromParams( genParams  );

//////// adjust ring  
string cchar    = "0";
string ordering = "dp";
int    numVars  = 3;

def rng = createRing( cchar, ordering, numVars ) ;

//////// adjust num of trials  
int trials = 100000000;
//////////////////////////////////////////////////////////////////////////////// 

testCharSeries( rng, idealG, trials);

