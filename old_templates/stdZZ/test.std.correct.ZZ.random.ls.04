

LIB("src/tests/test.std.correct");

LIB("src/randomRing.lib");
//monitor("log/test.std.correct.00","io");



//////////////////////////////////////////////////////////////////////////////// 
//////// adjust verbosity
printlevel = 0 ;
TRACE = 0;
echo  = 0;

//////// adjust random ideal generator params: 
def genParams = defaultRandomConstructionParams();

genParams.absMaxCoeff       = 45;
genParams.minVarFactorsPerMonomial = 0;
genParams.maxVarFactorsPerMonomial = 3; // max degree
genParams.maxTermsPerGen    = 2;
genParams.maxGens           = 2;

def gens = createRandomGeneratorsByParams( genParams  );


option("nowarn");

//////////////////////////////////////////////////////////////////////////////// 
 
def optionlist = list ("redSB", "redTail");

  TOrderingOpts oopts;  
  oopts.randomOrd = chooseGLWOrderingNoWs; // see randomRing

 oopts.randomOrd = chooseGlobalOrdering; // see randomRing
 
  oopts.minWeight = -10; //rename to minWeight
  oopts.maxWeight = 5; //rename to maxWeight


proc getRandomRing(  )
{

    int maxVars = 3;
   
   int numVars = random(1,maxVars);

   string vstr = "(x(1.."+string(numVars)+"))";
         
   string str_rng = "ring rng = integer,"+vstr+",";  
   
   str_rng = str_rng + "ls;";
   execute(str_rng);
   setring rng;

   return (basering);
}

option("warn");

int trials = 10000;

int checkRedSB=1;

testGroebner( getRandomRing, gens, optionlist, trials,checkRedSB, logfile);



