

LIB("bugs/test.std.correct");

LIB("src/randomRing.lib");


//////////////////////////////////////////////////////////////////////////////// 
//////// adjust verbosity
printlevel = 0 ;
TRACE = 0;
echo  = 0;

//////// adjust random ideal generator params: 
def genParams = defaultRandomConstructionParams();

genParams.absMaxCoeff       = 45;
genParams.minVarFactorsPerMonomial = 0;
genParams.maxVarFactorsPerMonomial = 6; // max degree
genParams.maxTermsPerGen    = 3;
genParams.maxGens           = 4;

option("nowarn");

  TOrderingOpts oopts;  
  oopts.randomOrd = chooseGLWOrdering; // see randomRing

  // oopts.randomOrd = randomStraightGlobalOrdering; // see randomRing

   oopts.randomOrd = chooseGLWOrderingNoWs; // see randomRing
 
  oopts.minWeight = -10; //rename to minWeight
  oopts.maxWeight = 5; //rename to maxWeight


 //////////////////////  composing ring options  //////////////// 
  TRandomRingOpts ropts = defaultRandomRingOpts();
  ropts.minChar = 0;
  ropts.maxChar = 200;
  ropts.doExt   = 0; //0:no; 1:yes; 2:randomly
  ropts.quotientIdeal = 0; // 0: no, 1: yes.
  ropts.maxVars = 6;
  
 
  ropts.oopts   = oopts;     //rename to monomialOrderingOpts

  // ropts.ordString = randomGLWMixedOrdering; // rename to ordStringP or ordStringF
 
   ropts.ordString = randomGLWBlockOrdering; // rename to ordStringP or ordStringF
 
  /////////////////////////////////////////////////////////////////////////////////////////


def optionlist = list ("redSB", "redTail");


option("warn");

int trials = 10000;

TGroebnerTestFlags flags = defaultGroebnerTestFlags();
  

option("warn");

proc run()
{
       def gens = createRandomGeneratorsByParams( genParams  );
       ropts.quotientIdealParams = genParams;
       TRandomRingGens rgens = createRandomRingGens(ropts);  

       testPureGroebner( rgens.getIntegerRing, gens, optionlist, trials, flags, logfile);
}


