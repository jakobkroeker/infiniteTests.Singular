
/*

string logfile = "/tmp/std01.log";

string cmd = read("input/std/test.std.correct.random.01"); execute(cmd);

run();

// solche parameter sind gut, die 
   bewirken, dass m√∂glichst viele pfade/ quelltext
   abgedeckt wird.

*/


option(nowarn);
option(noredefine);

LIB("src/tests/test.std.correct");
LIB("src/testutils.lib");
LIB("randomideal.lib");
LIB("src/randomRing.lib");

// LIB("src/automatedTests.lib");


//////////////////////////////////////////////////////////////////////////////// 
//////// adjust verbosity
printlevel = 0 ;
TRACE = 0;
echo  = 0;
 
//////////////////////////////////////////////////////////////////////////////// 
 def optionlist = list ("redSB", "redTail");
 
 
//////// adjust random ideal generator params: 
def genParams = defaultRandomConstructionParams();

genParams.absMaxCoeff       = 10;
genParams.minVarFactorsPerMonomial = 0;
genParams.maxVarFactorsPerMonomial = 5; // max degree
genParams.maxTermsPerGen    = 3;
genParams.maxGens           = 3;

def genTable = createRandomGeneratorsByParams( genParams  );


   // minpoly settings
  TIdealGeneratingParameters minpolyGenParams = defaultRandomConstructionParams();

  minpolyGenParams.absMaxCoeff       = 50;
  minpolyGenParams.minVarFactorsPerMonomial = 0;
  minpolyGenParams.maxVarFactorsPerMonomial = 3;
  minpolyGenParams.maxTermsPerGen    = 2;
  minpolyGenParams.bFractionsOn      = 0;
//////////////////////////////////////////////////////////////////////////////// 
 
def optionlist = list ("redSB", "redTail");

  TOrderingOpts oopts;  
  oopts.minWeight = -10; //rename to minWeight
  oopts.maxWeight = 5; //rename to maxWeight
  oopts.randomOrd = chooseStraightOrdering; //rename to ordStringP

 //////////////////////  composing ring options  //////////////// 
  TRandomRingOpts ropts = defaultRandomRingOpts();
  ropts.minChar = 2;
  ropts.maxChar = 200;
  ropts.doExt   = 0; //0:no; 1:yes; 2:randomly
  ropts.maxVars = 7;
  
  ropts.minpolyGenParams = minpolyGenParams;
  ropts.oopts   = oopts;     //rename to monomialOrderingOpts

  //ropts.ordString = randomGLWMixedOrdering; // rename to ordStringP or ordStringF
 
  ropts.ordString = randomGLWOrdering; // rename to ordStringP or ordStringF
 
  /////////////////////////////////////////////////////////////////////////////////////////

  TRandomRingGens rgens = createRandomRingGens(ropts);  

  // def R = rgens.getRing(); setring R;

option(warn);
def ol = createDefaultOutputInterface(logfile);
int trialsPerRing = 10;


int checkRedSB=1;



proc run()
{
     TGroebnerTestFlags testflags = defaultGroebnerTestFlags();
     
     TProcInfo testeeInfo;   testeeInfo.name = "groebner";    
     
    option(warn);
   //  testGroebner( testeeinfo, rgens.getRing, gens, optionlist, trialsPerRing, ol );
    testPureGroebner( testeeInfo, rgens.getRing, genTable, optionlist, trialsPerRing, testflags, infiniteTestsFinished, ol );
}


