
/* 

string logfile= "/tmp/tst5.log";

string cmd = read("input/primdec/test.primdecZ.01"); execute(cmd);
 
run();
 
 */

option(noredefine);
option(nowarn);

// LIB("src/wrappers.lib");
// LIB("src/randomRing.lib");

LIB "src/tests/test.primdecZ";
LIB "src/randomRing.lib";
LIB "src/testutils.lib";

//////////////////////////////////////////////////////////////////////////////// 
//////// adjust verbosity
printlevel = 0 ;
TRACE = 0;
echo  = 0;

def assumeLevel = 3;

def Top::assumeLevel = 3;

//////// adjust random ideal generator params: 
TIdealGeneratingParameters genParams = defaultRandomConstructionParams();

genParams.absMaxCoeff       = 30;
genParams.minVarFactorsPerMonomial = 0;
genParams.maxVarFactorsPerMonomial = 3;
genParams.maxTermsPerGen    = 4;
genParams.maxGens           = 2;
genParams.bFractionsOn      = 0;

def genTable = createRandomGeneratorsByParams( genParams  );

 def optionlist = list ("redSB", "redTail");
 
 ////////////////////////////////// random ring options   ////////////////////////////////
  
 // ordering settings
  TOrderingOpts oopts;  
  oopts.minWeight = -10; //rename to minWeight
  oopts.maxWeight = 5; //rename to maxWeight
  oopts.randomOrd = chooseStraightGlobalOrdering; //rename to ordStringP
  
  // minpoly settings
  TIdealGeneratingParameters minpolyGenParams = defaultRandomConstructionParams();

  minpolyGenParams.absMaxCoeff       = 30;
  minpolyGenParams.minVarFactorsPerMonomial = 0;
  minpolyGenParams.maxVarFactorsPerMonomial = 3;
  minpolyGenParams.maxTermsPerGen    = 3;
  minpolyGenParams.bFractionsOn      = 0;
 
  //////////////////////  composing ring options  //////////////// 
  TRandomRingOpts ropts;
  ropts.minChar = 0;
  // ropts.maxChar = 200;
  ropts.maxChar = 0;
  ropts.doExt   = 0; //0:no; 1:yes; 2:randomly
  ropts.minVars = 1;
  ropts.maxVars = 4;
  
  ropts.minpolyGenParams = minpolyGenParams;
  ropts.oopts   = oopts;     //rename to monomialOrderingOpts

  ropts.ordString = randomGLWMixedOrdering; // rename to ordStringP or ordStringF
 
  /////////////////////////////////////////////////////////////////////////////////////////

  TRandomRingGens rgens = createRandomRingGens(ropts);  



int trialsPerRing = 1;

int maxTrials = 10;

def ol = createDefaultOutputInterface(logfile);
option(warn);


proc runHelper(testPrimdecZMethod, finished)
{

  def genTable = createRandomGeneratorsByParams( genParams  );
  ropts.quotientIdealParams = genParams;
  TRandomRingGens rgens = createRandomRingGens(ropts);  
  
  dbprint(1, "// genParams.absMaxCoeff = "+string(genParams.absMaxCoeff));
  dbprint(1, "// genParams.maxVarFactorsPerMonomial = "+string(genParams.maxVarFactorsPerMonomial));
  dbprint(1, "// genParams.maxTermsPerGen = "+string(genParams.maxTermsPerGen));
  dbprint(1, "// genParams.maxGens = "+string(genParams.maxGens));
  dbprint(1, "// ropts.maxVars = "+string(ropts.maxVars));  
  testPrimdecZMethod( rgens.getIntegerRing, unchangedOptions, genTable, trialsPerRing, finished, ol );
  }


proc run()
{  
  
   proc finished(int trials)
   {
        return ( trials > maxTrials );
   }
   
   int runLoops = 0;
   
   while (not  infiniteTestsFinished (runLoops) )
   {   
        runHelper( testPrimdecZEx, finished );  
     
        runLoops = runLoops+1;
   }
}



 
